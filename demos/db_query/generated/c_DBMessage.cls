VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "c_DBMessage"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
'Generated by IDL2VB v121. Copyright (c) 1999-2003 Martin.Both
'Source File Name: ../demos/db_query/database.idl
'Target File Name: c_DBMessage.cls

Option Explicit

'struct ::DB::Message
Const sTypeId As String = "IDL:DB/Message:1.0"

'Member(s)
Private sqlcode_ As Long
Private sqlstate_ As String
Private sqlmessage_ As String

'Member: sqlcode
Public Property Get sqlcode() As Long
    sqlcode = sqlcode_
End Property

Public Property Let sqlcode(ByVal sqlcodeNew As Long)
    sqlcode_ = sqlcodeNew
End Property

'Member: sqlstate
Public Property Get sqlstate() As String
    sqlstate = sqlstate_
End Property

Public Property Let sqlstate(ByVal sqlstateNew As String)
    sqlstate_ = sqlstateNew
End Property

'Member: sqlmessage
Public Property Get sqlmessage() As String
    sqlmessage = sqlmessage_
End Property

Public Property Let sqlmessage(ByVal sqlmessageNew As String)
    sqlmessage_ = sqlmessageNew
End Property

'Helper
Public Sub initByRead(ByVal oIn As cOrbStream)
    On Error GoTo ErrHandler
    sqlcode_ = oIn.readLong()
    sqlstate_ = oIn.readString(5)
    sqlmessage_ = oIn.readString(255)
    Exit Sub
ErrHandler:
    Call VBOrb.ErrReraise(Err, "Message.read")
End Sub

'Helper
Public Sub writeMe(ByVal oOut As cOrbStream)
    On Error GoTo ErrHandler
    Call oOut.writeLong(sqlcode_)
    Call oOut.writeString(sqlstate_)
    Call oOut.writeString(sqlmessage_)
    Exit Sub
ErrHandler:
    Call VBOrb.ErrReraise(Err, "Message.write")
End Sub

'Helper
Public Sub initByAny(ByVal oAny As cOrbAny)
    On Error GoTo ErrHandler
    sqlcode_ = oAny.getLong()
    Call oAny.nextPos
    sqlstate_ = oAny.getString()
    Call oAny.nextPos
    sqlmessage_ = oAny.getString()
    Call oAny.nextPos
    Exit Sub
ErrHandler:
    Call VBOrb.ErrReraise(Err, "initByAny")
End Sub

'Helper
Public Sub insertIntoAny(ByVal oAny As cOrbAny)
    On Error GoTo ErrHandler
    Call oAny.insertLong(sqlcode_)
    Call oAny.nextPos
    Call oAny.insertString(sqlstate_)
    Call oAny.nextPos
    Call oAny.insertString(sqlmessage_)
    Call oAny.nextPos
    Exit Sub
ErrHandler:
    Call VBOrb.ErrReraise(Err, "insertIntoAny")
End Sub
