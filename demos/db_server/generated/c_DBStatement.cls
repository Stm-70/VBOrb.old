VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "c_DBStatement"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
'Generated by IDL2VB v121. Copyright (c) 1999-2003 Martin.Both
'Source File Name: ../demos/db_query/database.idl
'Target File Name: c_DBStatement.cls

Option Explicit

Implements cOrbAbstractBase
Implements cOrbObject

'interface ::DB::Statement
Const sTypeId As String = "IDL:DB/Statement:1.0"
Private oObjRef As cOrbObjRef

'Helper to get different COM interface
Friend Function thisOrbAbstractBase() As cOrbAbstractBase
    Set thisOrbAbstractBase = Me
End Function

'Helper
Private Function cOrbAbstractBase_isObjRef() As Boolean
    cOrbAbstractBase_isObjRef = True
End Function

'Helper to get different COM interface
Friend Function thisOrbObject() As cOrbObject
    Set thisOrbObject = Me
End Function

'Helper
Private Function cOrbObject_setObjRef(ByVal ObjRef As cOrbObjRef, _
    ByVal Check As Boolean) As Boolean
    On Error GoTo ErrHandler
    If ObjRef Is Nothing Then
        cOrbObject_setObjRef = True
    Else
        cOrbObject_setObjRef = False
        Call ObjRef.narrow(sTypeId, Check, False)
    End If
    Set oObjRef = ObjRef
    Exit Function
ErrHandler:
    Call VBOrb.ErrReraise(Err, "setObjRef")
End Function

'Helper
Private Function cOrbObject_getObjRef() As cOrbObjRef
    Set cOrbObject_getObjRef = oObjRef
End Function

'Helper
Private Function cOrbObject_getId() As String
    cOrbObject_getId = sTypeId
End Function

'describe() raises(c_DBErrMsgsEx)
Public Function describe(ByRef cols As c_DBColumnDescriptorSeq, _
    ByRef warns As c_DBMessageSeq) As Long
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("describe", False)
    Dim oIn As cOrbStream
    If oRequest.invokeReqst(True) Then
        Set oIn = oRequest.OutRes
        Dim sTypeId As String
        sTypeId = oIn.readString()
        Dim oUserEx As VBOrb.cOrbException
        Select Case sTypeId
        Case "IDL:DB/ErrMsgsEx:1.0"
            Set oUserEx = New c_DBErrMsgsEx
            Call oUserEx.initByRead(oIn)
        Case Else
            Call VBOrb.raiseUNKNOWN(1, VBOrb.CompletedMAYBE, _
                "Undefined CORBA User Exception: [" & sTypeId & "]")
        End Select
        Call VBOrb.raiseUserEx(oUserEx)
    Else
        Set oIn = oRequest.OutRes
        describe = oIn.readLong()
        Set cols = New c_DBColumnDescriptorSeq
        Call cols.initByRead(oIn, 0)
        Set warns = New c_DBMessageSeq
        Call warns.initByRead(oIn, 0)
    End If
    Exit Function
ErrHandler:
    Call VBOrb.ErrReraise(Err, "describe")
End Function

'execute() raises(c_DBErrMsgsEx)
Public Function execute(ByVal using As c_DBColumnDataSeq, _
    ByRef row As c_DBColumnDataSeq, ByRef warns As c_DBMessageSeq) As Long
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("execute", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call using.writeMe(oOut, 0)
    Dim oIn As cOrbStream
    If oRequest.invokeReqst(True) Then
        Set oIn = oRequest.OutRes
        Dim sTypeId As String
        sTypeId = oIn.readString()
        Dim oUserEx As VBOrb.cOrbException
        Select Case sTypeId
        Case "IDL:DB/ErrMsgsEx:1.0"
            Set oUserEx = New c_DBErrMsgsEx
            Call oUserEx.initByRead(oIn)
        Case Else
            Call VBOrb.raiseUNKNOWN(1, VBOrb.CompletedMAYBE, _
                "Undefined CORBA User Exception: [" & sTypeId & "]")
        End Select
        Call VBOrb.raiseUserEx(oUserEx)
    Else
        Set oIn = oRequest.OutRes
        execute = oIn.readLong()
        Set row = New c_DBColumnDataSeq
        Call row.initByRead(oIn, 0)
        Set warns = New c_DBMessageSeq
        Call warns.initByRead(oIn, 0)
    End If
    Exit Function
ErrHandler:
    Call VBOrb.ErrReraise(Err, "execute")
End Function

'declareCursor() raises(c_DBErrMsgsEx)
Public Function declareCursor(ByVal hold As Boolean, _
    ByRef warns As c_DBMessageSeq) As c_DBCursor
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("declareCursor", False)
    Dim oOut As cOrbStream
    Set oOut = oRequest.InArg
    Call oOut.writeBoolean(hold)
    Dim oIn As cOrbStream
    If oRequest.invokeReqst(True) Then
        Set oIn = oRequest.OutRes
        Dim sTypeId As String
        sTypeId = oIn.readString()
        Dim oUserEx As VBOrb.cOrbException
        Select Case sTypeId
        Case "IDL:DB/ErrMsgsEx:1.0"
            Set oUserEx = New c_DBErrMsgsEx
            Call oUserEx.initByRead(oIn)
        Case Else
            Call VBOrb.raiseUNKNOWN(1, VBOrb.CompletedMAYBE, _
                "Undefined CORBA User Exception: [" & sTypeId & "]")
        End Select
        Call VBOrb.raiseUserEx(oUserEx)
    Else
        Set oIn = oRequest.OutRes
        Set declareCursor = m_DBCursor.narrow(oIn.readObject())
        Set warns = New c_DBMessageSeq
        Call warns.initByRead(oIn, 0)
    End If
    Exit Function
ErrHandler:
    Set declareCursor = Nothing
    Call VBOrb.ErrReraise(Err, "declareCursor")
End Function

'free() raises(c_DBErrMsgsEx)
Public Sub free(ByRef warns As c_DBMessageSeq)
    On Error GoTo ErrHandler
    Dim oRequest As cOrbRequest
    Set oRequest = oObjRef.request("free", False)
    Dim oIn As cOrbStream
    If oRequest.invokeReqst(True) Then
        Set oIn = oRequest.OutRes
        Dim sTypeId As String
        sTypeId = oIn.readString()
        Dim oUserEx As VBOrb.cOrbException
        Select Case sTypeId
        Case "IDL:DB/ErrMsgsEx:1.0"
            Set oUserEx = New c_DBErrMsgsEx
            Call oUserEx.initByRead(oIn)
        Case Else
            Call VBOrb.raiseUNKNOWN(1, VBOrb.CompletedMAYBE, _
                "Undefined CORBA User Exception: [" & sTypeId & "]")
        End Select
        Call VBOrb.raiseUserEx(oUserEx)
    Else
        Set oIn = oRequest.OutRes
        Set warns = New c_DBMessageSeq
        Call warns.initByRead(oIn, 0)
    End If
    Exit Sub
ErrHandler:
    Call VBOrb.ErrReraise(Err, "free")
End Sub
