/*
   Copyright (c) 1999-2003 Martin.Both

   This library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either
   version 2 of the License, or (at your option) any later version.

   This library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
   Library General Public License for more details.
*/
#if !defined JP_PACKAGE
#define JP_PACKAGE mboth.idl2lang
#define JP_HEAD
#define JP_TAIL
#endif

package JP_PACKAGE;

#if defined JP_HEAD
import mboth.util.*;

/** 
 *
 *  @author  Martin Both
 */
public class IdlConst extends IdlIdentifier implements IdlDefinition
{
#endif

	/** <const_type> or a typedef
	 */
	private IdlType iConstTypeDef;

	/** iConstValue contains <const_type> and <const_exp>
	 */
	private IdlConstValue iConstValue;

	/** Read const identifier without type and value
	 *
	 *  @param	idlScope	
	 *  @param	token		Last token
	 *	@return				iConst (not null)
	 *
	 *	@exception	TxtReadException	With fromFilePos
	 */
	public static IdlConst readIdlConst(IdlScope idlScope, TxtToken token)
		throws TxtReadException
	{
		// <identifier>
		IdlIdentifier iWord= IdlIdentifier.readNewIdlWord(idlScope, token);
		IdlConst iConst= new IdlConst(iWord);
		idlScope.putIdentifier(iConst, true);

		// Register this constant as a new IDL definition
		// (Constants are always inside modules or other scopes.)
		idlScope.getIdlSpecification().registerIdlDef(iConst);

		return iConst;
	}

	/** Read const type, identifier and expression
	 *
	 *  @param	idlScope	Information about the surrounding scope
	 *  @param	tRef		Next TxtToken, unread() is not allowed because
	 *						it is maybe already used to unread ´>>´ operator!
	 *  @param	idlRd		TxtTokenReader
	 *	@return				iConst (not null)
	 *
	 *	@exception	TxtReadException	With fromFilePos
	 */
	public static IdlConst readIdlConst(IdlScope idlScope, TxtTokenRef tRef,
		TxtTokenReader idlRd) throws TxtReadException
	{
		// Read a <const_type>.
		TxtToken token= tRef.getOrReadToken(idlRd);
		tRef.ungetToken(token);
		IdlType iConstTypeDef= IdlBaseType.readConstType(idlScope, tRef, idlRd);
		if(iConstTypeDef.isAnonymousType())
			IdlSpecification.showAnonymousType(token.getFilePos(), iConstTypeDef);
		IdlConstType iConstType= (IdlConstType)iConstTypeDef.getOriginIdlType();
		
		// Read <identifier>
		token= tRef.getOrReadToken(idlRd);
		// System.out.println("const identifier: " + token);
		IdlConst iConst= readIdlConst(idlScope, token);
		iConst.iConstTypeDef= iConstTypeDef;

		// "="
		token= idlRd.readToken();
		if(!(token instanceof TxtTokSepChar) ||
			((TxtTokSepChar)token).getChar() != '=')
		{	throw new TxtReadException(token.getFilePos(),
				"\"=\" of constant declaration expected");
		}
		// <const_exp>
		iConst.iConstValue= iConstType.readIdlConstValue(idlScope, tRef, idlRd);
		// System.out.println("= " + iConst.iConstValue.toString());
		return iConst;
	}

	/** 
	 *  @param	identifier		Identifier
	 */
	private IdlConst(IdlIdentifier identifier)
	{
		super(identifier);
	}

	/** (IdlDefinition)
	 *  Get an IDL name to identify the definition uniquely
	 *  for a specific language mapping
	 *
	 *  @return		<sequence ::T>
	 */
	public String getIdlName()
	{	return getScopedName().toString();
	}

	/** 
	 *	@param	iConstType		IdlConstType
	 *	@param	value			Value
	 */
	public void setConstValue(IdlConstType iConstType, long value)
	{	iConstTypeDef= iConstType;
		iConstValue= new IdlConstValue(value);
		iConstValue.setConstType(iConstType);
	}

	/** 
	 *	@return				IdlType or null if not yet defined
	 */
	public IdlType getConstTypeDef()
	{	return iConstTypeDef;
	}

	/** 
	 *	@return				Value or null if not yet defined
	 */
	public IdlConstValue getConstValue()
	{	return iConstValue;
	}

#if defined JP_TAIL
}
#endif
