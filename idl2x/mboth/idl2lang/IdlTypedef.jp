/*
   Copyright (c) 1999-2003 Martin.Both

   This library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either
   version 2 of the License, or (at your option) any later version.

   This library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
   Library General Public License for more details.
*/
#if !defined JP_PACKAGE
#define JP_PACKAGE mboth.idl2lang
#define JP_HEAD
#define JP_TAIL
#endif

package JP_PACKAGE;

#if defined JP_HEAD
import mboth.util.*;

/** 
 *
 *  @author  Martin Both
 */
public class IdlTypedef extends IdlDeclarator implements IdlType
{
#endif

	/** <type_declarator> ::= <type_spec> <declarators>
	 *  Read type and declarators of typedef
	 *
	 *  @param	surContainer	
	 *  @param	tRef		Next token
	 *  @param	idlRd		IdlFile
	 *	@return				iTypedefs (never null)
	 *
	 *	@exception	TxtReadException	With fromFilePos
	 */
	public static IdlTypedef readIdlTypedefs(IdlContainer surContainer,
		TxtTokenRef tRef, TxtTokenReader idlRd) throws TxtReadException
	{
		// <type_spec>
		IdlType iType= IdlBaseType.readTypeSpec(surContainer, tRef, idlRd);
		// Anonymous type is allowed here
		// <declarators>
		TxtToken token;
		IdlTypedef iTypedefs= null;
		do
		{	// <identifier>
			IdlTypedef iTypedef= IdlTypedef.readIdlTypedef(iType,
				surContainer, tRef, idlRd);
			// Add typedef
			if(iTypedefs == null)
			{	iTypedefs= iTypedef;
			}else
			{	iTypedefs.addNext(iTypedef);
			}
			token= tRef.getOrReadToken(idlRd);
		}while(token instanceof TxtTokSepChar
			&& ((TxtTokSepChar)token).getChar() == ',');
		tRef.ungetToken(token);
		return iTypedefs;
	}

	/** Read declarator of typedef
	 *
	 *  @param	iType		<type_spec>, can be an anonymous type
	 *  @param	surScope	
	 *  @param	tRef		Next token
	 *  @param	idlRd		IdlFile
	 *	@return				iTypedef (never null)
	 *
	 *	@exception	TxtReadException	With fromFilePos
	 */
	public static IdlTypedef readIdlTypedef(IdlType iType, IdlScope surScope,
		TxtTokenRef tRef, TxtTokenReader idlRd) throws TxtReadException
	{
		// <identifier>
		TxtToken token= tRef.getOrReadToken(idlRd);
		IdlIdentifier iWord= IdlIdentifier.readNewIdlWord(surScope, token);
		// <fixed_array_size>*
		iType= IdlArray.readIdlType(iType, surScope, tRef, idlRd);

		IdlTypedef iTypedef= new IdlTypedef(iWord, iType);
		surScope.putIdentifier(iTypedef, true);

		// Register this typedef as a new IDL definition
		//
		surScope.getIdlSpecification().registerIdlDef(iTypedef);

		return iTypedef;
	}

	/** 
	 *  @param	identifier		Identifier
	 *  @param	iType	
	 */
	protected IdlTypedef(IdlIdentifier identifier, IdlType iType)
	{
		super(identifier, iType);
	}

	/** (IdlType:IdlDefinition)
	 *  Get an IDL name to identify the definition uniquely
	 *  for a specific language mapping
	 *
	 *  @return		<sequence ::T>
	 */
	public String getIdlName()
	{	return getScopedName().toString();
	}
	
	/** (IdlType)
	 *  Is a (structure or union) type currently under definition?
	 *
	 *	@return		isUnderDefinitionType
	 */
	public boolean isUnderDefinitionType()
	{	return false;
	}

	/** (IdlType)
	 *  Is a complete type (e.g. to be a member of structure or union)?
	 *
	 *	@return		isCompleteType
	 */
	public boolean isCompleteType()
	{	return idlType.isCompleteType();
	}

	/** (IdlType)
	 *  Get the incomplete type (e.g. member of a sequence).
	 *
	 *	@return		Incomplete type or null
	 */
	public IdlType getIncompleteType()
	{	return idlType.getIncompleteType();
	}

	/** (IdlType)
	 *  Is an anonymous type?
	 *
	 *	@return		isAnonymousType
	 */
	public boolean isAnonymousType()
	{	return false;
	}

	/** (IdlType)
	 *  Is a local type?
	 *	@return		isLocalType
	 */
	public boolean isLocalType()
	{	return idlType.isLocalType();
	}

	/** (IdlType)
	 *  Get the origin type of a typedef if not an array declarator.
	 *  If an array declarator then return an array type.
	 *
	 *	@return		iType
	 */
	public IdlType getOriginIdlType()
	{	return idlType.getOriginIdlType();	// if idlType is also a typedef
	}

#if defined JP_TAIL
}
#endif
