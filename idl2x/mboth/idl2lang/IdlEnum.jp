/*
   Copyright (c) 1999-2003 Martin.Both

   This library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either
   version 2 of the License, or (at your option) any later version.

   This library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
   Library General Public License for more details.
*/
#if !defined JP_PACKAGE
#define JP_PACKAGE mboth.idl2lang
#define JP_HEAD
#define JP_TAIL
#endif

package JP_PACKAGE;

#if defined JP_HEAD
import mboth.util.*;

/** Enumeration
 *  Enumerated types consist of ordered lists of identifiers.
 *
 *  @author  Martin Both
 */
public class IdlEnum extends IdlIdentifier implements IdlSwitchType
{
#endif

	/** Not only forward declared?
	 */
	private boolean bDefined;

	/** Enumerators
	 */
	private IdlConst idlEnumerators;

	/** Read enumeration head
	 *
	 *  @param	idlScope	
	 *  @param	token		Last token
	 *	@return				iEnum (not null)
	 *
	 *	@exception	TxtReadException	With fromFilePos
	 */
	public static IdlEnum readIdlEnum(IdlScope idlScope, TxtToken token)
		throws TxtReadException
	{
		// <identifier>
		IdlIdentifier iWord= IdlIdentifier.readNewIdlWord(idlScope, token);
		IdlEnum iEnum= new IdlEnum(iWord);
		idlScope.putIdentifier(iEnum, true);
		return iEnum;
	}

	/** 
	 *  @param	identifier		Identifier
	 */
	public IdlEnum(IdlIdentifier identifier)
	{
		super(identifier);
	}

	/** Read enumerators
	 *
	 *  @param	idlRd		IdlFile
	 *	@return				Unused token
	 *
	 *	@exception	TxtReadException	With fromFilePos
	 */
	public TxtToken readIdl(TxtTokenReader idlRd) throws TxtReadException
	{
		// "{" <enumerator> { "," + <enumerator> }* "}"
		
		// "{"
		TxtToken token= idlRd.readToken();
		if(!(token instanceof TxtTokSepChar) ||
			((TxtTokSepChar)token).getChar() != '{')
		{	throw new TxtReadException(token.getFilePos(),
				"\"{\" of enum declaration expected");
		}

		// 15.3.2.6 The first enum identifier has the numeric value zero (0).
		int value= -1;
		do
		{	// <enumerator>
			token= idlRd.readToken();
			// <identifier>
			IdlConst iConst= IdlConst.readIdlConst(getSurScope(), token);
			iConst.setConstValue(this, ++value);
			// Add enumerator
			if(idlEnumerators == null)
			{	idlEnumerators= iConst;
			}else
			{	idlEnumerators.addNext(iConst);
			}
			token= idlRd.readToken();
		}while(token instanceof TxtTokSepChar
			&& ((TxtTokSepChar)token).getChar() == ',');

		if(!(token instanceof TxtTokSepChar) ||
			((TxtTokSepChar)token).getChar() != '}')
		{	throw new TxtReadException(token.getFilePos(),
				"\"}\" of enum declaration expected");
		}
		bDefined= true;

		// Register the enum as a new IDL definition in the surrounding scope.
		// (Enums are like constants always living inside modules or interfaces
		// but also in structs or unions.)
		getSurScope().getIdlSpecification().registerIdlDef(this);

		return idlRd.readToken();
	}

	/** (IdlType:IdlDefinition)
	 *  Get an IDL name to identify the definition uniquely
	 *  for a specific language mapping
	 *
	 *  @return		<sequence ::T>
	 */
	public String getIdlName()
	{	return IdlSpecification.ENUM;
	}

	/** (IdlType)
	 *  Is a (structure or union) type currently under definition?
	 *
	 *	@return		isUnderDefinitionType
	 */
	public boolean isUnderDefinitionType()
	{	return false;
	}

	/** (IdlType)
	 *  Is a complete type (e.g. to be a member of structure or union)?
	 *
	 *	@return		isCompleteType
	 */
	public boolean isCompleteType()
	{	return bDefined;
	}

	/** (IdlType)
	 *  Get the incomplete type (e.g. member of a sequence).
	 *
	 *	@return		Incomplete type or null
	 */
	public IdlType getIncompleteType()
	{	return isCompleteType()? null: this;
	}

	/** (IdlType)
	 *  Is an anonymous type?
	 *
	 *	@return		isAnonymousType
	 */
	public boolean isAnonymousType()
	{	return false;
	}

	/** (IdlType)
	 *  Is a local type?
	 *	@return		isLocalType
	 */
	public boolean isLocalType()
	{	return false;
	}

	/** (IdlType)
	 *  Get the origin type of a typedef if not an array declarator.
	 *
	 *	@return		iType
	 */
	public IdlType getOriginIdlType()
	{	return this;
	}

	/** (IdlConstType)
	 *  Read <const_exp>
	 *
	 *  @param	idlScope	Information about the surrounding scope
	 *  @param	tRef		Next TxtToken, unread() is not allowed because
	 *						it is maybe already used to unread ´>>´ operator!
	 *  @param	idlRd		TxtTokenReader
	 *  @return				Result value
	 *
	 *	@exception	TxtReadException	With fromFilePos
	 */
	public IdlConstValue readIdlConstValue(IdlScope idlScope, TxtTokenRef tRef,
		TxtTokenReader idlRd) throws TxtReadException
	{	IdlConstValue iConstValue= IdlConstValue.readConstExpression(this,
			idlScope, tRef, idlRd, IdlConstValue.PRIOR_EX);
		if(iConstValue.getConstType() != this || iConstValue.getLong() == null)
		{	throw new TxtReadException(tRef.value.getFilePos(),
				"Type mismatch. Constant value must be an enumerator of the enumeration.");
		}
		return iConstValue;
	}

	/** (IdlConstType)
	 *  Read a subexpression until finding an operator with less or equal
	 *  priority of prevPrior or unexpected token. If there is no value token
	 *  an exception is thrown.
	 *
	 *  @param	idlScope	Information about the surrounding scope
	 *  @param	tRef		Next TxtToken, unread() is not allowed because
	 *						it is maybe already used to unread ´>>´ operator!
	 *  @param	idlRd		TxtTokenReader
	 *	@param	prevPrior
	 *  @return				Result value
	 *
	 *	@exception	TxtReadException	With fromFilePos
	 */
	public IdlConstValue readSubExpression(IdlScope idlScope, TxtTokenRef tRef,
		TxtTokenReader idlRd, int prevPrior) throws TxtReadException
	{	IdlConstValue iConstValue= IdlConstValue.readConstExpression(this,
			idlScope, tRef, idlRd, prevPrior);
		if(iConstValue.getConstType() != this || iConstValue.getLong() == null)
		{	throw new TxtReadException(tRef.value.getFilePos(),
				"Type mismatch. Constant value must be an enumerator of the enumeration.");
		}
		return iConstValue;
	}
	
	/** Get the Enumerators. Used by Union to introduce the identifiers
	 *  in the case labels.
	 */
	public IdlConst getEnumerators()
	{	return idlEnumerators;
	}
#if defined JP_TAIL
}
#endif
