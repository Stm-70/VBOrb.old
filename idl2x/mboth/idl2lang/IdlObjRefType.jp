/*
   Copyright (c) 1999-2003 Martin.Both

   This library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either
   version 2 of the License, or (at your option) any later version.

   This library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
   Library General Public License for more details.
*/
#if !defined JP_PACKAGE
#define JP_PACKAGE mboth.idl2lang
#define JP_HEAD
#define JP_TAIL
#endif

package JP_PACKAGE;

#if defined JP_HEAD
import java.util.Hashtable;
import java.util.Enumeration;
import java.io.IOException;
import mboth.util.*;

/** An interface is a reference to an object supporting that interface.
 *  An interface name is an IdlType (Object).
 *
 *  @author  Martin Both
 */
public class IdlObjRefType extends IdlInterface // IdlScope implements IdlType
{
#endif

	/** Either local or unconstrained interface?
	 */
	private boolean bLocal;

	/** Read an interface head.
	 *
	 *  @param	idlScope	
	 *  @param	bLocal		Constrained to a local object?
	 *  @param	token		Last token
	 *  @param	idlRd		IdlFile
	 *	@return				iObjRefType (not null)
	 *
	 *	@exception	TxtReadException	With fromFilePos
	 */
	public static IdlObjRefType readIdlHead(IdlScope idlScope,
		boolean bLocal, TxtToken token, TxtTokenReader idlRd)
		throws TxtReadException
	{
		IdlObjRefType iObjRefType;
		// <identifier>
		IdlIdentifier iWord= IdlIdentifier.readIdlWord(idlScope, token);
		IdlIdentifier identifier= idlScope.getIdentifier(iWord,
			IdlScope.SL_DEFN | IdlScope.SL_INTR);
		if(identifier != null)
		{	IdlInterface iInterface;
			if(!(identifier instanceof IdlInterface))
			{	TxtReadException ex= new TxtReadException(iWord.getFilePos(),
					"IDL identifier `" + identifier.getUnEscName()
					+ "' redefined after use");
				ex.setNextException(new TxtReadException(identifier.getFilePos(),
					"Position of the first identifier definition"));
				throw ex;
			}
			// forward declared or already declared
			iInterface= (IdlInterface)identifier;
			if(iInterface.isAbstract() || bLocal != iInterface.isLocal())
			{	TxtReadException ex= new TxtReadException(iWord.getFilePos(),
					"Different abstract or local modifiers for interface `"
					+ iInterface.getUnEscName() + "'");
				ex.setNextException(new TxtReadException(iInterface.getFilePos(),
					"Position of previous declaration"));
				throw ex;
			}
			iObjRefType= (IdlObjRefType)iInterface;
			iObjRefType.checkPragmaPrefix(iWord);
			#if defined IDL2VB
			iObjRefType.checkPragmaVbPrefix(iWord);
			#endif
		}else
		{	iObjRefType= new IdlObjRefType(iWord, bLocal);
			idlScope.putIdentifier(iObjRefType, true);
			// The name of an interface, valuetype, struct, union, exception
			// or a module may not be redefined within the immediate scope of
			// the interface, valuetype, struct, union, exception, or the
			// module. That's why we introduce the identifier now.
			iObjRefType.putIdentifier(iObjRefType, false);
		}
		return iObjRefType;
	}

	/** 
	 *  @param	identifier	Identifier
	 *  @param	bLocal		Local?
	 */
	protected IdlObjRefType(IdlIdentifier identifier, boolean bLocal)
	{
		super(identifier);
		this.bLocal= bLocal;
	}

	/** Is an abstract interface?
	 *
	 *	@return		bAbstract
	 */
	public boolean isAbstract()
	{	return false;
	}

	/** Is a local interface?
	 *
	 *	@return		bLocal
	 */
	public boolean isLocal()
	{	return bLocal;
	}

	/** (IdlType)
	 *  Is a local type?
	 *	@return		isLocalType
	 */
	public boolean isLocalType()
	{	return bLocal;
	}
#if defined JP_TAIL
}
#endif
