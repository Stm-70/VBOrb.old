/*
   Copyright (c) 1999-2003 Martin.Both

   This library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either
   version 2 of the License, or (at your option) any later version.

   This library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
   Library General Public License for more details.
*/
#if !defined JP_PACKAGE
#define JP_PACKAGE mboth.idl2lang
#define JP_HEAD
#define JP_TAIL
#endif

package JP_PACKAGE;

#if defined JP_HEAD
import java.io.IOException;
import mboth.util.*;

/** An attribute definition is logically equivalent to declaring a pair of
 *  accessor functions; one to retrieve the value of the attribute and one
 *  to set the value of the attribute.
 *
 *  @author  Martin Both
 */
public class IdlAttribute extends IdlIdentifier implements IdlDefinition
{
#endif
	/** 
	 */
	private boolean readonly;
	
	/** <param_type_spec>
	 */
	private IdlType idlType;
	
	/** Read attribute
	 *
	 *  @param	readonly	
	 *  @param	iType		IdlType
	 *  @param	idlScope	
	 *  @param	token		Last token
	 *  @param	idlRd		IdlFile
	 *	@return				iAttribute (not null)
	 *
	 *	@exception	TxtReadException	With fromFilePos
	 */
	public static IdlAttribute readIdlHead(boolean readonly, IdlType iType,
		IdlScope idlScope, TxtToken token, TxtTokenReader idlRd)
		throws TxtReadException
	{
		IdlAttribute iAttribute= new IdlAttribute(
			IdlIdentifier.readNewIdlWord(idlScope, token), readonly, iType);
		idlScope.putIdentifier(iAttribute, true);

		// Register the operation as a new IDL definition
		//
		idlScope.getIdlSpecification().registerIdlDef(iAttribute);

		return iAttribute;
	}

	/** 
	 *  @param	identifier		Identifier
	 *  @param	readonly	
	 *  @param	idlType	
	 */
	public IdlAttribute(IdlIdentifier identifier, boolean readonly,
		IdlType idlType)
	{
		super(identifier);
		this.readonly= readonly;
		this.idlType= idlType;
	}

	/** (IdlDefinition)
	 *  Get an IDL name to identify the definition uniquely
	 *  for a specific language mapping
	 *
	 *  @return		<sequence ::T>
	 */
	public String getIdlName()
	{	return getScopedName().toString();
	}

#if defined JP_TAIL
}
#endif
