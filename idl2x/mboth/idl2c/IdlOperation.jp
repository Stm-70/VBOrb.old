#define JP_IDL2C
#define JP_PACKAGE mboth.idl2c
#define JP_HEAD

	#include "../idl2lang/IdlOperation.jp"

	/** C name (without general prefix) or null if unset
	 */
	private String sCName;
	
	/** (IdlDefinition)
	 *  Set the C Name
	 *
	 *	@param	CName		Can be "" if not IdlType
	 *	@return		== null, It was not too late to set
	 *				== CName, It is unsetable
	 *				otherwise, The old name: Cannot set twice
	 */
	public String setCName(String CName)
	{	if(this.sCName != null)
			return this.sCName;
		this.sCName= CName;
		return null;
	}

	/** (IdlDefinition)
	 *  Get the C Name to identify the definition
	 *
	 *	@param	withPrefix	With final prefix? The name without prefix
	 *  					is used to build complex names.
	 *	@return		C Name
	 */
	public String getCName(boolean withPrefix)
	{	if(this.sCName == null)
		{	this.sCName= this.getIdlContainer().getCName(false);
			if(this.sCName.length() == 0)
				this.sCName= this.getUnEscName();
			else
				this.sCName += "_" + getUnEscName();
			//???if(CWriter.hashResWord(sVbName) != null)
		}
		return this.sCName;
	}

	/**
	 *  @param	out		
	 *
	 *	@exception	IOException	
	 */
	public void writeC(/* CWriter out*/) //throws java.io.IOException
	{
		String opName= getUnEscName();
		
		for(IdlOpParameter opPar= idlOpParameters; opPar != null;
			opPar= (IdlOpParameter)opPar.getNext())
		{	System.out.print(", ");//out.write(", ");
			opPar.writeCPar(/*out*/);
		}
		System.out.println();
	}
}
