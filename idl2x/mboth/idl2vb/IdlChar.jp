#define JP_IDL2VB
#define JP_PACKAGE mboth.idl2vb
#define JP_HEAD

	#include "../idl2lang/IdlChar.jp"

	/** (IdlDefinition)
	 *  Set the Visual Basic Name
	 *
	 *	@param	sVbName		Can be "" if not IdlType
	 *	@return		== null, It was not too late to set
	 *				== sVbName, It is unsetable
	 *				otherwise, The old name: Cannot set twice
	 */
	public String setVbName(String sVbName)
	{
		return sVbName;
	}

	/** (IdlType)
	 *  Get the Visual Basic Name to identify the type
	 *
	 *	@bPrefix	With final prefix?
	 *	@return		Visual Basic Name
	 */
	public String getVbName(boolean bPrefix)
	{	return wide? VbClsWriter.INTEGER: VbClsWriter.BYTE;
	}

	/** (IdlType)
	 *
	 *  @return				Assign by SET or LET?
	 */
	public boolean isVbSet()
	{	return false;
	}

	/** (IdlType)
	 *
	 *  @param	out		
	 *  @param	vbVariable	Name of the VB variable
	 *
	 *	@exception	java.io.IOException	
	 */
	public void writeVbRead(VbClsWriter out, String vbVariable)
		 throws java.io.IOException
	{
		String readFunc= wide? "readWchar": "readChar";
		out.writeLine(vbVariable + " = " + VbClsWriter.OIN + "."
			+ readFunc + "()");
	}

	/** (IdlType)
	 *
	 *  @param	out		
	 *  @param	vbVariable	Name of the VB variable
	 *
	 *	@exception	java.io.IOException	
	 */
	public void writeVbWrite(VbClsWriter out, String vbVariable)
		 throws java.io.IOException
	{
		String writeFunc= wide? "writeWchar": "writeChar";
		out.writeLine(VbClsWriter.CALL + " " + VbClsWriter.OOUT + "."
			+ writeFunc + "(" + vbVariable + ")");
	}

	/** (IdlType)
	 *  Write VB code assigning the TypeCode to a VB variable
	 *  @param	out		
	 *  @param	vbVariable	Name of the VB variable getting the TypeCode
	 *
	 *	@exception	java.io.IOException	
	 */
	public void writeVbAssignTypeCode(VbWriter out, String vbVariable)
		 throws java.io.IOException
	{	
		// mCB.tk_wchar = 26, mCB.tk_char = 9
		String sTC= wide? "26": "9";
		out.writeAssign(vbVariable, true);
		out.writeLine("oOrb.createPrimitiveTc(" + sTC + ") 'VBOrb.TC...");
	}

	/** (IdlType)
	 *  Write VB code extracting the value from an oAny to a VB variable
	 *  @param	out		
	 *  @param	vbVariable	Name of the VB variable getting the value
	 *
	 *	@exception	java.io.IOException	
	 */
	public void writeVbFromAny(VbWriter out, String vbVariable)
		 throws java.io.IOException
	{	
		String getFunc= wide? "getWchar": "getChar";
		out.writeAssign(vbVariable, false);
		out.writeLine(VbWriter.OANY + "." + getFunc + "()");
	}

	/** (IdlType)
	 *  Write VB code inserting the value into an oAny
	 *  @param	out		
	 *  @param	vbVariable	Name of the VB variable containing the value
	 *
	 *	@exception	java.io.IOException	
	 */
	public void writeVbIntoAny(VbWriter out, String vbVariable)
		 throws java.io.IOException
	{	
		String insertFunc= wide? "insertWchar": "insertChar";
		out.writeLine(VbWriter.CALL + " " + VbWriter.OANY + "."
			+ insertFunc + "(" + vbVariable + ")");
	}
}
