#define JP_IDL2VB
#define JP_PACKAGE mboth.idl2vb
#define JP_HEAD

	#define getIdlName getOrigIdlName
	#include "../idl2lang/IdlShort.jp"
	#undef getIdlName

	/** (IdlDefinition)
	 *  Get an IDL name to identify the definition uniquely
	 *
	 *  @return		<sequence ::T>
	 */
	public String getIdlName()
	{	return IdlSpecification.SHORT;	// UNSIGNED SHORT is SHORT in VB
	}

	/** (IdlDefinition)
	 *  Set the Visual Basic Name
	 *
	 *	@param	sVbName		Can be "" if not IdlType
	 *	@return		== null, It was not too late to set
	 *				== sVbName, It is unsetable
	 *				otherwise, The old name: Cannot set twice
	 */
	public String setVbName(String sVbName)
	{
		return sVbName;
	}

	/** (IdlDefinition)
	 *  Get the Visual Basic Name to identify the definition
	 *
	 *	@param	bPrefix	With final prefix? The name without prefix is used
	 *  				to build complex names.
	 *	@return		Visual Basic Name
	 */
	public String getVbName(boolean bPrefix)
	{	return VbClsWriter.INTEGER;	// UNSIGNED SHORT is SHORT in VB
	}

	/** (IdlType)
	 *
	 *  @return				Assign by SET or LET?
	 */
	public boolean isVbSet()
	{	return false;
	}

	/** (IdlType)
	 *
	 *  @param	out		
	 *  @param	vbVariable	Name of the VB variable
	 *
	 *	@exception	java.io.IOException	
	 */
	public void writeVbRead(VbClsWriter out, String vbVariable)
		 throws java.io.IOException
	{
		String readFunc= unsigned? "readUshort": "readShort";
		out.writeLine(vbVariable + " = " + VbClsWriter.OIN + "."
			+ readFunc + "()");
	}

	/** (IdlType)
	 *
	 *  @param	out		
	 *  @param	vbVariable	Name of the VB variable
	 *
	 *	@exception	java.io.IOException	
	 */
	public void writeVbWrite(VbClsWriter out, String vbVariable)
		 throws java.io.IOException
	{
		String writeFunc= unsigned? "writeUshort": "writeShort";
		out.writeLine(VbClsWriter.CALL + " " + VbClsWriter.OOUT + "."
			+ writeFunc + "(" + vbVariable + ")");
	}

	/** (IdlType)
	 *  Write VB code assigning the TypeCode to a VB variable
	 *  @param	out		
	 *  @param	vbVariable	Name of the VB variable getting the TypeCode
	 *
	 *	@exception	java.io.IOException	
	 */
	public void writeVbAssignTypeCode(VbWriter out, String vbVariable)
		 throws java.io.IOException
	{
		// mCB.tk_ushort = 4, mCB.tk_short = 2
		String sTCKind= unsigned? "4": "2";
		String sTCName= unsigned? "TCUshort": "TCShort";
		out.writeAssign(vbVariable, true);
		out.writeLine("oOrb.createPrimitiveTc("
			+ sTCKind + ") 'VBOrb." + sTCName);
	}

	/** (IdlType)
	 *  Write VB code extracting the value from an oAny to a VB variable
	 *  @param	out		
	 *  @param	vbVariable	Name of the VB variable getting the value
	 *
	 *	@exception	java.io.IOException	
	 */
	public void writeVbFromAny(VbWriter out, String vbVariable)
		 throws java.io.IOException
	{	
		String getFunc= unsigned? "getUshort": "getShort";
		out.writeAssign(vbVariable, false);
		out.writeLine(VbWriter.OANY + "." + getFunc + "()");
	}

	/** (IdlType)
	 *  Write VB code inserting the value into an oAny
	 *  @param	out		
	 *  @param	vbVariable	Name of the VB variable containing the value
	 *
	 *	@exception	java.io.IOException	
	 */
	public void writeVbIntoAny(VbWriter out, String vbVariable)
		 throws java.io.IOException
	{	
		String insertFunc= unsigned? "insertUshort": "insertShort";
		out.writeLine(VbWriter.CALL + " " + VbWriter.OANY + "."
			+ insertFunc + "(" + vbVariable + ")");
	}
}
