#define JP_IDL2VB
#define JP_PACKAGE mboth.idl2vb
#define JP_HEAD

	#include "../idl2lang/IdlValueBase.jp"

	/** Writing value factory class
	 *
	 *	@param	sIdlName	
	 *	@param	SrcFileName		
	 *	@param	sVbName		
	 *	@param	vbPath		
	 */
	static public void writeFactoryCls(String sIdlName, String SrcFileName,
		String sVbName, String vbPath) throws java.io.IOException
	{
		if(IDL2VB.bNoValueFactories)
			return;
		
		// Writing VB value type factory class
		String vbFactoryName= sVbName + "VF"; // "VFactory"; is too long
		if(MainOptions.iLogLvl >= 4)
			System.out.println("I Writing valuetype factory " + sIdlName
				+ " to `" + vbFactoryName + ".cls'");
		
		VbClsWriter vbF= new VbClsWriter(vbPath, vbFactoryName,
			SrcFileName);

		// Implements cOrbValueFactory
		vbF.writeLine();
		vbF.writeLine(VbWriter.IMPLEMENTS + VbWriter.SP
			+ VbWriter.CORBVALUEFACTORY);

		// Implements cOrbValueFactory
		vbF.writeLine();
		vbF.writeFuncThisObject(VbWriter.FRIEND,
			"OrbValueFactory", VbWriter.CORBVALUEFACTORY);

		String vbInterface= VbWriter.CORBVALUEFACTORY;
		vbF.writeLine();
		vbF.writeFuncHead(VbWriter.PRIVATE, vbInterface
			+ "_newUninitValue");
		vbF.writeFuncBody(VbWriter.CORBVALUEBASE, false);
		vbF.writeLine(VbWriter.SET + VbWriter.SP
			+ vbInterface +  "_newUninitValue = "
			+ VbWriter.NEW + VbWriter.SP + sVbName);
		vbF.writeFuncTail(null, null);
		
		vbF.close();
	}

	/** (IdlDefinition)
	 *  Set the Visual Basic Name
	 *
	 *	@param	sVbName		Can be "" if not IdlType
	 *	@return		== null, It was not too late to set
	 *				== sVbName, It is unsetable
	 *				otherwise, The old name: Cannot set twice
	 */
	public String setVbName(String sVbName)
	{
		return sVbName;
	}

	/** (IdlDefinition)
	 *  Get the Visual Basic Name to identify the definition
	 *
	 *	@param	bPrefix	With final prefix? The name without prefix is used
	 *  				to build complex names.
	 *	@return		Visual Basic Name
	 */
	public String getVbName(boolean bPrefix)
	{
		return bPrefix? VbWriter.CORBVALUEBASE: IdlSpecification.VALUEBASE;
	}

	/** (IdlType)
	 *
	 *  @return				Assign by SET or LET?
	 */
	public boolean isVbSet()
	{	return true;
	}

	/** (IdlType)
	 *	Write VB code reading the value from an oIn stream
	 *  @param	out		
	 *  @param	vbVariable	Name of the VB variable getting the value
	 *
	 *	@exception	java.io.IOException	
	 */
	public void writeVbRead(VbClsWriter out, String vbVariable)
		 throws java.io.IOException
	{
		out.writeLine(VbWriter.SET + VbWriter.SP + vbVariable + " = "
			+ VbWriter.OIN + ".readValue(" + VbWriter.NOTHING + ")");
	}

	/** (IdlType)
	 *	Write VB code writing the value to an oOut stream
	 *  @param	out		
	 *  @param	vbVariable	Name of the VB variable containing the value
	 *
	 *	@exception	java.io.IOException	
	 */
	public void writeVbWrite(VbClsWriter out, String vbVariable)
		 throws java.io.IOException
	{
		out.writeLine(VbWriter.CALL + " " + VbWriter.OOUT
			+ ".writeValue(" + vbVariable + ")");
	}

	/** (IdlType)
	 *  Write VB code assigning the TypeCode to a VB variable
	 *  @param	out		
	 *  @param	vbVariable	Name of the VB variable getting the TypeCode
	 *
	 *	@exception	java.io.IOException	
	 */
	public void writeVbAssignTypeCode(VbWriter out, String vbVariable)
		 throws java.io.IOException
	{	
		out.writeAssign(vbVariable, true);
		// mCB.tk_value = 29
		out.writeLine("oOrb.createPrimitiveTc(29) 'VBOrb.TCValueBase");
	}

	/** (IdlType)
	 *  Write VB code extracting the value from an oAny to a VB variable
	 *  @param	out		
	 *  @param	vbVariable	Name of the VB variable getting the value
	 *
	 *	@exception	java.io.IOException	
	 */
	public void writeVbFromAny(VbWriter out, String vbVariable)
		 throws java.io.IOException
	{	
		out.writeAssign(vbVariable, true);
		out.writeLine(VbWriter.OANY + ".getVal()");
	}

	/** (IdlType)
	 *  Write VB code inserting the value into an oAny
	 *  @param	out		
	 *  @param	vbVariable	Name of the VB variable containing the value
	 *
	 *	@exception	java.io.IOException	
	 */
	public void writeVbIntoAny(VbWriter out, String vbVariable)
		 throws java.io.IOException
	{	
		out.writeLine(VbWriter.CALL + " " + VbWriter.OANY
			+ ".insertVal(" + vbVariable + ")");
	}
}
