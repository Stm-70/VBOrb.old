#define JP_IDL2VB
#define JP_PACKAGE mboth.idl2vb
#define JP_HEAD // extends IdlScope implements IdlDefinition

	#include "../idl2lang/IdlOperation.jp"

	/** Remove all Underscores in the name of operations and
	 *  attributes and set the next character to uppercase.
	 */
	public static String convertOpOrAttr2VB(String idlName)
	{	StringBuffer sBuf= new StringBuffer(idlName.length());
		boolean ufound= false;
		for(int i= 0; i < idlName.length(); i++)
		{	if(idlName.charAt(i) == '_')
			{	ufound= true;
			}else if(!ufound)
			{	sBuf.append(idlName.charAt(i));
			}else
			{	sBuf.append(Character.toUpperCase(idlName.charAt(i)));
				ufound= false;
			}
		}
		return sBuf.toString();
	}
	
	/** VB name (without general prefix) or null if unset
	 */
	private String sVbName;
	
	/** (IdlDefinition)
	 *  Set the Visual Basic Name
	 *  #pragma vbname <idldef> can change the name
	 *
	 *	@param	sVbName		Can be "" if not IdlType
	 *	@return		== null, It was not too late to set
	 *				== sVbName, It is unsetable
	 *				otherwise, The old name: Cannot set twice
	 */
	public String setVbName(String sVbName)
	{
		if(this.sVbName != null)
			return this.sVbName;
		this.sVbName= sVbName;
		return null;
	}

	/** (IdlDefinition)
	 *  Get the Visual Basic Name to identify the definition
	 *
	 *	@param	bPrefix	With final prefix? The name without prefix is used
	 *  				to build complex names.
	 *	@return		Visual Basic Name
	 */
	public String getVbName(boolean bPrefix)
	{	if(sVbName == null)
		{	// Append names until the highest scope (next IdlContainer) is reached
			StringBuffer sBuf= new StringBuffer(getUnEscName());
			for(IdlScope iScope= getSurScope(); iScope != null;
				iScope= iScope.getSurScope())
			{	if(iScope instanceof IdlContainer)
					break;
				sBuf.insert(0, iScope.getUnEscName());
			}
			sVbName= convertOpOrAttr2VB(sBuf.toString());
			if(VbWriter.hashResWord(sVbName) != null)
			{	boolean isSub= (idlType instanceof IdlVoid);
				sVbName= sVbName + (isSub? "Sub": "Func");
			}
		}
		if(bPrefix)
		{	// Method checkMappingOfIdlDefs() needs a unique name
			for(IdlScope iScope= getSurScope(); iScope != null;
				iScope= iScope.getSurScope())
			{	if(iScope instanceof IdlContainer)
					return ((IdlContainer)iScope).getVbModName() + "."
						+ sVbName;
			}
		}
		return sVbName;
	}

	/** VB sub or function
	 *  @return				vbSubFuncName= opName[Sub|Func]
	 */
	public String getVbSubFuncName()
	{
		return getVbName(false);
	}

	/**
	 *  @param	out		
	 *
	 *	@exception	IOException	
	 */
	public void writeVbSubOrFunc(VbClsWriter out) throws java.io.IOException
	{
		boolean isSub= (idlType instanceof IdlVoid);
		String opName= getUnEscName();
		String vbSFName= getVbSubFuncName();

		out.writeLine();
		out.write("'");
		if(oneway)
			out.write(IdlSpecification.ONEWAY+ " ");
		out.write(opName + "()");
		if(getIdlExceptions() != null)
		{	out.write(VbWriter.SP + IdlSpecification.RAISES + "(");
			for(int i= 0; i < getIdlExceptions().length; i++)
			{	if(i > 0)
					out.write(", ");
				out.write(getIdlExceptions()[i].getVbName(true));
			}
			out.write(")");
		}
		out.writeLine();
		boolean hasResults;
		if(isSub)
		{	hasResults= false;
			out.writeSubHead(VbWriter.PUBLIC, vbSFName);
		}else
		{	hasResults= true;
			out.writeFuncHead(VbWriter.PUBLIC, vbSFName);
		}
		//if(getIdlExceptions() != null)
		//	out.writeArg(VbWriter.BYREF, VbWriter.OEX, VbWriter.CORBEXCEPTION,
		//		null);
		boolean hasInArgs= false;
		for(IdlOpParameter opPar= idlOpParameters; opPar != null;
			opPar= (IdlOpParameter)opPar.getNext())
		{	opPar.writeVbArg(out);
			if(opPar.isOut())
				hasResults= true;
			if(opPar.isIn())
				hasInArgs= true;
		}
		if(isSub)
			out.writeSubBody(true);
		else
			out.writeFuncBody(idlType.getVbName(true), true);

		out.writeVbRequest(opName, hasInArgs, oneway);

		for(IdlOpParameter opPar= idlOpParameters; opPar != null;
			opPar= (IdlOpParameter)opPar.getNext())
		{	// Write all in and inout parameters
			if(opPar.isIn())
			{	IdlType iType= opPar.getIdlType();
				iType.writeVbWrite(out, opPar.getVbArgName());
			}
		}
		out.writeVbInvokeReq(hasResults, getIdlExceptions());
		if(!isSub)
		{	idlType.writeVbRead(out, vbSFName);
		}
		for(IdlOpParameter opPar= idlOpParameters; opPar != null;
			opPar= (IdlOpParameter)opPar.getNext())
		{	// Read all out and inout parameters
			if(opPar.isOut())
			{	IdlType iType= opPar.getIdlType();
				iType.writeVbRead(out, opPar.getVbArgName());
			}
		}
		if(getIdlExceptions() != null)
			out.writeEndIf();	// End of reading exceptions by InvokeReq()

		if(isSub)
			out.writeSubTail(vbSFName);
		else
			out.writeFuncTail(vbSFName, idlType.isVbSet()? vbSFName: null);
	}

	/** Write additional server skeleton caller
	 *  @param	out		
	 *  @param	vbScopeNo	"a1_", "a2_", ...
	 *
	 *	@exception	IOException	
	 */
	public void writeVbImplExec(VbClsWriter out, int vbScopeNo)
		throws IOException
	{
		boolean isSub= (idlType instanceof IdlVoid);
		String opName= getUnEscName();
		String vbSFName= getVbSubFuncName();
		String vbScopePrefix= "a" + vbScopeNo + "_";
		//String vbExDimName= (getIdlExceptions() == null)? null: VbWriter.OEX;

		out.writeLine(VbWriter.CASE + " \"" + opName + "\"");
		out.indent(true);
		// DIM a1_...
		// oIn.read...()
		for(IdlOpParameter opPar= idlOpParameters; opPar != null;
			opPar= (IdlOpParameter)opPar.getNext())
		{	String vbArgDimName= vbScopePrefix + opPar.getUnEscName();
			IdlType iType= opPar.getIdlType();
			out.writeDimLine(vbArgDimName, iType.getVbName(true));
			if(opPar.isIn())
			{	iType.writeVbRead(out, vbArgDimName);
			}
		}
		//if(vbExDimName != null)
		//	out.writeDimLine(vbExDimName, VbWriter.CORBEXCEPTION);
		if(isSub)
		{	out.write(VbWriter.CALL + VbWriter.SP);
		}else
		{	out.writeDimLine(vbSFName, idlType.getVbName(true));
			if(idlType.isVbSet())
				out.write(VbWriter.SET + VbWriter.SP);
			out.write(vbSFName + " = ");
		}
		out.write("oImpl_" + "." + vbSFName);
		if(!isSub || idlOpParameters != null /*|| vbExDimName != null*/)
			out.write("(");
		//if(vbExDimName != null)
		//	out.writeArg(null, vbExDimName, null, null);
		for(IdlOpParameter opPar= idlOpParameters; opPar != null;
			opPar= (IdlOpParameter)opPar.getNext())
		{	String vbArgDimName= vbScopePrefix + opPar.getUnEscName();
			out.writeArg(null, vbArgDimName, null, null);
		}
		if(!isSub || idlOpParameters != null /*|| vbExDimName != null*/)
			out.write(")");
		out.writeLine();
		// Exception handling
		//if(getIdlExceptions() == null)
		//	//out.writeIfExGoTo();
		//}else
		//{	out.writeIf(VbWriter.NOT + VbWriter.SP + vbExDimName + VbWriter.SP
		//		+ VbWriter.IS + VbWriter.SP + VbWriter.NOTHING);
		//	out.writeLine(VbWriter.SP + VbWriter.THEN + VbWriter.SP
		//		+ VbWriter.GOTO + VbWriter.SP + VbWriter.USEREXWRITER);
		//}
		if(!isSub)
			idlType.writeVbWrite(out, vbSFName);
		// oOut.write...()
		for(IdlOpParameter opPar= idlOpParameters; opPar != null;
			opPar= (IdlOpParameter)opPar.getNext())
		{	if(opPar.isOut())
			{	String vbArgDimName= vbScopePrefix + opPar.getUnEscName();
				IdlType iType= opPar.getIdlType();
				iType.writeVbWrite(out, vbArgDimName);
			}
		}
		out.indent(false);
	}

	/** Write additional server delegate function
	 *  @param	vbInterface		Interface name or null if public
	 *							vbInterface == null is nonsense here???
	 *  @param	out		
	 *
	 *	@exception	IOException	
	 */
	public void writeVbImplTie(String vbInterface, VbClsWriter out)
		throws IOException
	{
		boolean isSub= (idlType instanceof IdlVoid);
		String opName= getUnEscName();
		String vbSFName= getVbSubFuncName();

		out.writeLine();
		out.write("'");
		if(oneway)
			out.write(IdlSpecification.ONEWAY+ " ");
		out.write(opName + "()");
		if(getIdlExceptions() != null)
		{	out.write(VbWriter.SP + IdlSpecification.RAISES + "(");
			for(int i= 0; i < getIdlExceptions().length; i++)
			{	if(i > 0)
					out.write(", ");
				out.write(getIdlExceptions()[i].getVbName(true));
			}
			out.write(")");
		}
		out.writeLine();

		if(vbInterface == null)
		{	if(isSub)
			{	out.writeSubHead(VbWriter.PUBLIC, vbSFName);
			}else
			{	out.writeFuncHead(VbWriter.PUBLIC, vbSFName);
			}
		}else
		{	if(isSub)
			{	out.writeSubHead(VbWriter.PRIVATE,
					vbInterface + "_" + vbSFName);
			}else
			{	out.writeFuncHead(VbWriter.PRIVATE,
					vbInterface + "_" + vbSFName);
			}
		}
		//if(getIdlExceptions() != null)
		//	out.writeArg(VbWriter.BYREF, VbWriter.OEX, VbWriter.CORBEXCEPTION,
		//		null);
		for(IdlOpParameter opPar= idlOpParameters; opPar != null;
			opPar= (IdlOpParameter)opPar.getNext())
		{	opPar.writeVbArg(out);
		}
		if(isSub)
			out.writeSubBody(true);
		else
			out.writeFuncBody(idlType.getVbName(true), true);
		out.writeLine("'Please write your own code here if using as servant example");
		out.writeIf("oDelegate Is Nothing"); out.writeThen();
		out.writeLine(VbWriter.CALL + VbWriter.SP + IDL2VB.getVbOrbDLL()
			+ ".raiseNOIMPLEMENT(0, " + IDL2VB.getVbOrbDLL() + ".CompletedNO)");
		out.writeElse();
		if(isSub)
		{	out.write(VbWriter.CALL);
		}else
		{	if(idlType.isVbSet())
			{	out.write(VbWriter.SET); out.write(VbWriter.SP);
			}
			if(vbInterface == null)
				out.write(vbSFName + " =");
			else
				out.write(vbInterface + "_" + vbSFName + " =");
		}
		out.write(VbWriter.SP + "oDelegate." + vbSFName);
		if(!isSub /*|| getIdlExceptions() != null*/ || idlOpParameters != null)
			out.write("(");
		//if(getIdlExceptions() != null)
		//	out.writeArg(null, VbWriter.OEX, null, null);
		for(IdlOpParameter opPar= idlOpParameters; opPar != null;
			opPar= (IdlOpParameter)opPar.getNext())
		{	out.writeArg(null, opPar.getVbArgName(), null, null);
		}
		if(!isSub /*|| getIdlExceptions() != null*/ || idlOpParameters != null)
			out.write(")");
		out.writeLine();
		out.writeEndIf();
		if(isSub)
			out.writeSubTail(vbSFName);
		else
		{	if(vbInterface == null)
			{	out.writeFuncTail(vbSFName,
					idlType.isVbSet()? vbSFName: null);
			}else
			{	out.writeFuncTail(vbSFName,
					idlType.isVbSet()? vbInterface + "_" + vbSFName: null);
			}
		}
	}

	/** Write additional implement examples or write valuetype example
	 *  @param	vbInterface		Interface name or null if public
	 *							vbInterface != null is nonsense here???
	 *  @param	out		
	 *
	 *	@exception	IOException	
	 */
	public void writeVbImplExample(String vbInterface, VbClsWriter out)
		throws IOException
	{
		boolean isSub= (idlType instanceof IdlVoid);
		String opName= getUnEscName();
		String vbSFName= getVbSubFuncName();

		out.writeLine();
		out.write("'");
		if(oneway)
			out.write(IdlSpecification.ONEWAY+ " ");
		out.write(opName + "()");
		if(getIdlExceptions() != null)
		{	out.write(VbWriter.SP + IdlSpecification.RAISES + "(");
			for(int i= 0; i < getIdlExceptions().length; i++)
			{	if(i > 0)
					out.write(", ");
				out.write(getIdlExceptions()[i].getVbName(true));
			}
			out.write(")");
		}
		out.writeLine();

		if(vbInterface == null)
		{	if(isSub)
			{	out.writeSubHead(VbWriter.PUBLIC, vbSFName);
			}else
			{	out.writeFuncHead(VbWriter.PUBLIC, vbSFName);
			}
		}else
		{	if(isSub)
			{	out.writeSubHead(VbWriter.PRIVATE,
					vbInterface + "_" + vbSFName);
			}else
			{	out.writeFuncHead(VbWriter.PRIVATE,
					vbInterface + "_" + vbSFName);
			}
		}
		//if(getIdlExceptions() != null)
		//	out.writeArg(VbWriter.BYREF, VbWriter.OEX, VbWriter.CORBEXCEPTION,
		//		null);
		for(IdlOpParameter opPar= idlOpParameters; opPar != null;
			opPar= (IdlOpParameter)opPar.getNext())
		{	opPar.writeVbArg(out);
		}
		if(isSub)
			out.writeSubBody(true);
		else
			out.writeFuncBody(idlType.getVbName(true), true);
		//do something
		out.writeLine("'Please write your code here after copying this file");
		out.writeLine("'instead of throwing an exception");
		out.write("'e.g. ");
		if(isSub)
		{	out.write(VbWriter.CALL);
		}else
		{	if(idlType.isVbSet())
			{	out.write(VbWriter.SET); out.write(VbWriter.SP);
			}
			if(vbInterface == null)
				out.write(vbSFName + " =");
			else
				out.write(vbInterface + "_" + vbSFName + " =");
		}
		out.write(VbWriter.SP + "oDelegate." + vbSFName);
		if(!isSub /*|| getIdlExceptions() != null*/ || idlOpParameters != null)
			out.write("(");
		//if(getIdlExceptions() != null)
		//	out.writeArg(null, VbWriter.OEX, null, null);
		for(IdlOpParameter opPar= idlOpParameters; opPar != null;
			opPar= (IdlOpParameter)opPar.getNext())
		{	out.writeArg(null, opPar.getVbArgName(), null, null);
		}
		if(!isSub /*|| getIdlExceptions() != null*/ || idlOpParameters != null)
			out.write(")");
		out.writeLine();
		out.writeLine(VbWriter.CALL + VbWriter.SP + IDL2VB.getVbOrbDLL()
			+ ".raiseNOIMPLEMENT(0, " + IDL2VB.getVbOrbDLL() + ".CompletedNO)");
		if(isSub)
			out.writeSubTail(vbSFName);
		else
		{	if(vbInterface == null)
			{	out.writeFuncTail(vbSFName,
					idlType.isVbSet()? vbSFName: null);
			}else
			{	out.writeFuncTail(vbSFName,
					idlType.isVbSet()? vbInterface + "_" + vbSFName: null);
			}
		}
	}

	/** Write implementation of interfaces for valuetypes
	 *  @param	vbInterface		Interface name or null if public
	 *							vbInterface == null is nonsense here???
	 *  @param	out		
	 *
	 *	@exception	IOException	
	 */
	public void writeVbValImpl(String vbInterface, VbClsWriter out)
		throws IOException
	{
		boolean isSub= (idlType instanceof IdlVoid);
		String opName= getUnEscName();
		String vbSFName= getVbSubFuncName();

		out.writeLine();
		out.write("'");
		if(oneway)
			out.write(IdlSpecification.ONEWAY+ " ");
		out.write(opName + "()");
		if(getIdlExceptions() != null)
		{	out.write(VbWriter.SP + IdlSpecification.RAISES + "(");
			for(int i= 0; i < getIdlExceptions().length; i++)
			{	if(i > 0)
					out.write(", ");
				out.write(getIdlExceptions()[i].getVbName(true));
			}
			out.write(")");
		}
		out.writeLine();

		if(vbInterface == null)
		{	if(isSub)
			{	out.writeSubHead(VbWriter.PUBLIC, vbSFName);
			}else
			{	out.writeFuncHead(VbWriter.PUBLIC, vbSFName);
			}
		}else
		{	if(isSub)
			{	out.writeSubHead(VbWriter.PRIVATE,
					vbInterface + "_" + vbSFName);
			}else
			{	out.writeFuncHead(VbWriter.PRIVATE,
					vbInterface + "_" + vbSFName);
			}
		}
		//if(getIdlExceptions() != null)
		//	out.writeArg(VbWriter.BYREF, VbWriter.OEX, VbWriter.CORBEXCEPTION,
		//		null);
		for(IdlOpParameter opPar= idlOpParameters; opPar != null;
			opPar= (IdlOpParameter)opPar.getNext())
		{	opPar.writeVbArg(out);
		}
		if(isSub)
			out.writeSubBody(false);
		else
			out.writeFuncBody(idlType.getVbName(true), false);
		if(isSub)
		{	out.write(VbWriter.CALL);
		}else
		{	if(idlType.isVbSet())
			{	out.write(VbWriter.SET); out.write(VbWriter.SP);
			}
			if(vbInterface == null)
				out.write(vbSFName + " =");
			else
				out.write(vbInterface + "_" + vbSFName + " =");
		}
		out.write(VbWriter.SP + vbSFName);
		if(!isSub /*|| getIdlExceptions() != null*/ || idlOpParameters != null)
			out.write("(");
		//if(getIdlExceptions() != null)
		//	out.writeArg(null, VbWriter.OEX, null, null);
		for(IdlOpParameter opPar= idlOpParameters; opPar != null;
			opPar= (IdlOpParameter)opPar.getNext())
		{	out.writeArg(null, opPar.getVbArgName(), null, null);
		}
		if(!isSub /*|| getIdlExceptions() != null*/ || idlOpParameters != null)
			out.write(")");
		out.writeLine();
		if(isSub)
			out.writeSubTail(null);
		else
			out.writeFuncTail(null, null);
	}
}
