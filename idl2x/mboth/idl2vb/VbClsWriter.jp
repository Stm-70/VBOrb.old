/*
   Copyright (c) 1999 Martin.Both

   This library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either
   version 2 of the License, or (at your option) any later version.

   This library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
   Library General Public License for more details.
*/

package mboth.idl2vb;

import java.util.Hashtable;
import java.io.*;

/**
 * @author  Martin Both
 */
public class VbClsWriter extends VbWriter
{
	/**
	 */
	private String clsName;
	
	/** 
	 *  @param	path		
	 *  @param	clsName		
	 *  @param	srcName		
	 *
	 *	@exception	IOException
	 */
	public VbClsWriter(String path, String clsName, String srcName)
		throws IOException
	{
		super(path, clsName + ".cls");
		this.clsName= clsName;

		if(vbProject != null)
			vbProject.addClass(path, clsName);

		writeLine("VERSION 1.0 CLASS");
		writeLine("BEGIN");
		writeLine("  MultiUse = -1  'True");
		writeLine("END");
		writeLine(ATTRIBUTE + SP + "VB_Name = \"" + clsName + "\"");
		writeLine(ATTRIBUTE + SP + "VB_GlobalNameSpace = False");
		writeLine(ATTRIBUTE + SP + "VB_Creatable = True");
		writeLine(ATTRIBUTE + SP + "VB_PredeclaredId = False");
		writeLine(ATTRIBUTE + SP + "VB_Exposed = "
			+ (IDL2VB.bVbClsExposed? TRUE: FALSE));
		writeLine("'Generated by IDL2VB v" + IDL2VB.sVersion
			+ ". Copyright (c) 1999-2003 Martin.Both");
		writeLine("'Source File Name: " + srcName);
		writeLine("'Target File Name: " + clsName + ".cls");
		writeLine();
		writeLine(OPTION + SP + EXPLICIT);
	}
	
	/** 
	 *  @param	vbInterface		VbWriter.FRIEND (for VB classes which can
	 *							be a COM interface) or VbWriter.PUBLIC
	 *  @param	vbName			Name of this... helper function
	 *  @param	vbSuperType		VB COM interface
	 *	@exception	IOException
	 */
	public void writeFuncThisObject(String vbInterface, String vbName,
		String vbSuperType) throws java.io.IOException
	{
		String vbAttr, vbFuncName;
		if(vbInterface == VbWriter.FRIEND || vbInterface == VbWriter.PUBLIC)
		{	vbFuncName= "this" + vbName;
			vbAttr= vbInterface;
		}else
		{	vbFuncName= vbInterface + "_" + "this" + vbName;
			vbAttr= VbWriter.PRIVATE;
		}
		writeLine("'Helper to get different COM interface");
		writeFuncHead(vbAttr, vbFuncName);
		writeFuncBody(vbSuperType, /* vbOnErrGo */ false);
		writeAssign(vbFuncName, /* vbSet */ true);
		writeLine(ME);
		writeFuncTail(/* vbErrSource */ null, /* setNothing */ null);
	}

	/** 
	 *	@exception	IOException
	 */
	public void writeGetObjRef() throws IOException
	{
		writeLine();
		writePropertyHead(FRIEND, GET, OBJREF);
		writePropertyBody(CORBOBJREF, /* vbGet */ true, /* vbOnErrGo */ false);
		writeAssign(OBJREF, /* vbSet */ true); writeLine(OOBJREF);
		writePropertyTail(/* vbErrSource */ null, /* setNothing */ null);
	}

	/** Write setDelegate() function of interface objects
	 *  @param		vbName
	 *	@exception	IOException
	 */
	public void writeSetGetDelegate(String vbName) throws IOException
	{
		String sFuncName= "setDelegate";
		writeLine();
		writeLine("'Each tie contains a delegate object, to which all operations are forwarded.");
		writeLine("'You can remove this if you use this class as an example for your servant.");
		writeSubHead(PUBLIC, sFuncName);
		writeSubArg(BYVAL, "Delegate", vbName, null);
		writeSubBody(false);
		writeAssign("oDelegate", /* vbSet */ true); writeLine("Delegate");
		writeSubTail(null);

		sFuncName= "getDelegate";
		writeLine();
		writeFuncHead(PUBLIC, sFuncName);
		writeFuncBody(vbName, false);
		writeAssign(sFuncName, /* vbSet */ true); writeLine("oDelegate");
		writeFuncTail(null, null);
	}

	/** Write This() function of interface objects
	 *  @param		vbName
	 *	@exception	IOException
	 */
	public void writeGetThis(String vbName) throws IOException
	{
		String sFuncName= "This";
		writeLine();
		writePropertyHead(FRIEND, GET, sFuncName);
		writePropertyBody(vbName, true, false);
		writeDimLine("oObj", CORBOBJECT);
		writeLine(SET + SP + "oObj =" + SP + NEW + SP + vbName);
		writeIf("oObj.setObjRef(oObjRef, False)"); writeThen();
			writeAssign(sFuncName, /* vbSet */ true); writeLine(NOTHING);
		writeElse();
			writeAssign(sFuncName, /* vbSet */ true); writeLine("oObj");
		writeEndIf();
		writePropertyTail(null, null);
	}

	/** Writing Private Properties
	 * 
	 *	@param	sTypeIds	sTypeIds[0] is the most derived TypeId
	 *	@exception	IOException
	 */
	public void writeSkeletonProps(String sTypeIds[])
		throws IOException
	{
		final String ITEM= "Item";
		writeLine();
		writeLine(PRIVATE + SP + PROPERTY + SP + GET + SP
			+ CORBSKELETON + "_" + TYPEID + "(" + BYVAL + SP
			+ ITEM + SP + AS + SP + INTEGER + ") " + AS + SP + STRING);
		indent(true);
		writeLine(SELECT + SP + CASE + SP + ITEM);
		for(int ti= 0; ti <= sTypeIds.length; ti++)
		{	String sTypeId;
			if(ti == 0)
			{	sTypeId= STYPEID;
			}else if(ti == sTypeIds.length)
			{	sTypeId= "\"IDL:omg.org/CORBA/Object:1.0\"";
			}else
			{	sTypeId= "\"" + sTypeIds[ti] + "\"";
			}
			writeLine(CASE + SP + ti + ": "
				+ CORBSKELETON + "_" + TYPEID + " = " + sTypeId);
		}
		writeLine(END + SP + SELECT);
		indent(false);
		writeLine(END + SP + PROPERTY);

		writeLine();
		writeLine(PRIVATE + SP + PROPERTY + SP + GET + SP
			+ CORBSKELETON + "_" + OBJREF + "() " + AS + SP + CORBOBJREF);
		indent(true);
		writeLine(SET + SP + CORBSKELETON + "_" + OBJREF + " = " + OOBJREF);
		indent(false);
		writeLine(END + SP + PROPERTY);

		writeLine();
		writeLine(PRIVATE + SP + PROPERTY + SP + SET + SP
			+ CORBSKELETON + "_" + OBJREF + "("
			+ BYVAL + SP + "new" + OBJREF + SP + AS + SP + CORBOBJREF + ")");
		indent(true);
		writeLine(SET + SP + OOBJREF + " = new" + OBJREF);
		indent(false);
		writeLine(END + SP + PROPERTY);
	}

	/** Write cOrbAbstractBase_isObjRef() function
	 *  isObjRef
	 *	@exception	IOException
	 */
	public void writeAbstractBaseIsObjRef(boolean isObjRef) throws IOException
	{
		String sFuncName= CORBABSTRACTBASE + "_isObjRef";
		
		writeLine();
		writeLine("'Helper");
		writeFuncHead(PRIVATE, sFuncName);
		writeFuncBody(BOOLEAN, false);
		writeLine(sFuncName + " = " + (isObjRef? TRUE: FALSE));
		writeFuncTail(null, null);
	}

	/** Write cOrbObject_setObjRef() function of interface objects
	 *  @param		isLocal
	 *	@exception	IOException
	 */
	public void writeObjectSetObjRef(boolean isLocal) throws IOException
	{
		String sFuncName= CORBOBJECT + "_setObjRef";
		
		writeLine();
		writeLine("'Helper");
		writeFuncHead(PRIVATE, sFuncName);
		writeFuncArg(BYVAL, OBJREF, CORBOBJREF, null);
		writeFuncArg(BYVAL, "Check", BOOLEAN, null);
		writeFuncBody(BOOLEAN, true);
		writeIf(OBJREF + SP + IS + SP + NOTHING); writeThen();
		writeLine(sFuncName + SP + "=" + SP + TRUE);
		writeElse();
		writeLine(sFuncName + SP + "=" + SP + FALSE);
		writeLine(CALL + SP + OBJREF + ".narrow("
			+ STYPEID + ", Check, " + (isLocal? TRUE: FALSE) + ")");
		writeEndIf();
		writeLine(SET + SP + OOBJREF + " = " + OBJREF);
		writeFuncTail("setObjRef", null);
	}

	/** Write cOrbObject_getObjRef() function of interface objects
	 *	@exception	IOException
	 */
	public void writeObjectGetObjRef() throws IOException
	{
		String sFuncName= CORBOBJECT + "_getObjRef";
		
		writeLine();
		writeLine("'Helper");
		writeFuncHead(PRIVATE, sFuncName);
		writeFuncBody(CORBOBJREF, false);
		writeLine(SET + SP + sFuncName + " = " + OOBJREF);
		writeFuncTail(null, null);
	}

	/** Write writeObjectGetObjRef() function of interface objects
	 *	@exception	IOException
	 */
	public void writeObjectGetId() throws IOException
	{
		String sFuncName= CORBOBJECT + "_getId";
		
		writeLine();
		writeLine("'Helper");
		writeFuncHead(PRIVATE, sFuncName);
		writeFuncBody(STRING, false);
		writeLine(sFuncName + " = " + STYPEID);
		writeFuncTail(null, null);
	}

	/**
	 *  @param vbInterface		Interface name or null
	 *  @param isFunction
	 *
	 *	@exception	IOException
	 */
	public void writeInitByReadHead(String vbInterface, boolean isFunction)
		throws IOException
	{
		boolean vbOnErrGo= true;
		String vbAttr, vbFuncName;
		if(vbInterface == VbWriter.FRIEND || vbInterface == VbWriter.PUBLIC)
		{	vbFuncName= INITBYREAD;
			vbAttr= vbInterface;
		}else
		{	vbFuncName= vbInterface + "_" + INITBYREAD;
			vbAttr= VbWriter.PRIVATE;
		}
		writeLine();
		writeLine("'Helper");
		if(isFunction)
		{	writeFuncHead(vbAttr, vbFuncName);
		}else
		{	writeSubHead(vbAttr, vbFuncName);
		}
		writeArg(BYVAL, OIN, CORBSTREAM, null);
		if(isFunction)
			writeFuncBody(BOOLEAN, vbOnErrGo);
		else
			writeSubBody(vbOnErrGo);
	}

	/**
	 *  @param vbInterface		Interface name or null
	 *
	 *	@exception	IOException
	 */
	public void writeWriteMeHead(String vbInterface) throws IOException
	{
		boolean vbOnErrGo= true;
		String vbAttr, vbFuncName;
		if(vbInterface == VbWriter.FRIEND || vbInterface == VbWriter.PUBLIC)
		{	vbFuncName= WRITEME;
			vbAttr= vbInterface;
		}else
		{	vbFuncName= vbInterface + "_" + WRITEME;
			vbAttr= VbWriter.PRIVATE;
		}
		writeLine();
		writeLine("'Helper");
		writeSubHead(vbAttr, vbFuncName);
		writeArg(BYVAL, OOUT, CORBSTREAM, null);
		writeSubBody(vbOnErrGo);
	}

	/**
	 *
	 *	@exception	IOException
	 */
	public void writeFuncExecuteHead() throws IOException
	{
		writeLine();
		writeLine("'Helper");
		writeFuncHead(PRIVATE, CORBSKELETON + "_" + EXECUTE);
		writeFuncArg(BYVAL, SOPERATION, STRING, null);
		writeArg(BYVAL, OIN, CORBSTREAM, null);
		writeArg(BYVAL, OOUT, CORBSTREAM, null);
		writeFuncBody(LONG, true);
	}

	/**
	 *  @param	reqName		
	 *  @param	hasInArgs			Has to write arguments
	 *  @param	oneway		
	 *
	 *	@exception	IOException
	 */
	public void writeVbRequest(String reqName, boolean hasInArgs,
		boolean oneway) throws IOException
	{
		writeDimLine(OREQUEST, CORBREQUEST);
		writeLine(SET + SP + OREQUEST + " = " + OOBJREF + ".request("
			+ "\"" + reqName + "\", "
			+ (oneway? TRUE: FALSE) + ")");
		if(hasInArgs)
		{	writeDimLine(OOUT, CORBSTREAM);
			writeLine(SET + SP + OOUT + " = " + OREQUEST + ".InArg");
		}
	}

	/**
	 *  @param	hasResults		Has out arguments or result
	 *  @param	rExceptions
	 *
	 *	@exception	IOException
	 */
	public void writeVbInvokeReq(boolean hasResults, IdlException rExceptions[])
		 throws IOException
	{
		if(hasResults || rExceptions != null)
		{	writeDimLine(OIN, CORBSTREAM);
		}
		if(rExceptions != null)
		{	writeIf(OREQUEST + ".invokeReqst(" + TRUE + ")");
			writeThen();
			writeLine(SET + SP + OIN + " = " + OREQUEST + ".OutRes");
			writeDimLine(STYPEID, STRING);
			writeLine(STYPEID + " = " + OIN + ".readString()");
			writeDimLine(OUSEREX, IDL2VB.getVbOrbDLL() + "." + CORBEXCEPTION);
			writeLine(SELECT + SP + CASE + SP + STYPEID);
			for(int i= 0; i < rExceptions.length; i++)
			{	writeLine(CASE + " \"" + rExceptions[i].getTypeId() + "\"");
				indent(true);
				writeLine(SET + SP + OUSEREX + " = " + NEW + SP
					+ rExceptions[i].getVbName(true));
				writeLine(CALL + SP + OUSEREX + "." + INITBYREAD + "(" + OIN + ")");
				indent(false);
			}
			writeLine(CASE + SP + ELSE);
			indent(true);
			// Has to raise UNKNOWN with standard minor code set to 1
			write(CALL + SP + IDL2VB.getVbOrbDLL() + ".raiseUNKNOWN(1, "
				+ IDL2VB.getVbOrbDLL() + ".CompletedMAYBE, ");
			writeLine("\"Undefined CORBA User Exception: [\" & " + STYPEID
				+ " & \"]\")");
			indent(false);
			writeLine(END + SP + SELECT);
			writeLine(CALL + SP + IDL2VB.getVbOrbDLL() + ".raiseUserEx"
				+ "(" + OUSEREX + ")");
			if(hasResults)
				writeElse();	// Begin of reading results
		}else
		{	writeLine(CALL + SP + OREQUEST + ".invokeReqst(" + FALSE + ")");
		}
		if(hasResults)
			writeLine(SET + SP + OIN + " = " + OREQUEST + ".OutRes");
		// Don't forget:
		//	if(rExceptions != null)
		//		writeEndIf();	// End of reading exceptions
	}

	/**
	 *  @param	attrName		
	 *  @param	propertyName		
	 *  @param	idlType		
	 *
	 *	@exception	IOException
	 */
	public void writeAttributeGet(String attrName, String propertyName,
		IdlType idlType) throws IOException
	{
		writeAttributeHead(null, attrName, propertyName,
			GET, idlType, true);

		boolean hasResults= true;
		writeVbRequest("_get_" + attrName, false, false);	// no oneway
		writeVbInvokeReq(hasResults, null); 				// no userExs
		idlType.writeVbRead(this, propertyName); // Reading result

		writeAttributeTail(null, propertyName, GET, idlType, true);
	}

	/**
	 *  @param	attrName		
	 *  @param	propertyName		
	 *  @param	idlType		
	 *
	 *	@exception	IOException
	 */
	public void writeAttributeLetOrSet(String attrName, String propertyName,
		IdlType idlType) throws IOException
	{
		String vbKind= idlType.isVbSet()? SET: LET;
		writeAttributeHead(null, attrName, propertyName,
			vbKind, idlType, true);

		boolean hasResults= false;
		writeVbRequest("_set_" + attrName, true, false);	// no oneway
		idlType.writeVbWrite(this, attrName + "New");
		writeVbInvokeReq(hasResults, null);					// no userExs

		writeAttributeTail(null, propertyName, vbKind, idlType, true);
	}

	/**
	 *  @param	vbInterface		Interface name or null if public
	 *  @param	attrName		
	 *  @param	vbName			Property name
	 *  @param	vbKind			Get, Let, Set
	 *  @param	idlType		
	 *  @param	vbOnErrGo		On Error Goto ErrHandler
	 *
	 *	@exception	IOException
	 */
	public void writeAttributeHead(String vbInterface, String attrName,
		String vbName, String vbKind, IdlType idlType, boolean vbOnErrGo)
		throws IOException
	{
		if(vbInterface == null)
		{	writePropertyHead(PUBLIC, vbKind, vbName);
		}else
		{	writePropertyHead(PRIVATE, vbKind, vbInterface + "_" + vbName);
		}
		if(vbKind != GET)
			write(BYVAL + SP + attrName + "New");
		writePropertyBody(idlType.getVbName(true), vbKind == GET, vbOnErrGo);
	}

	/**
	 *  @param	vbInterface		Interface name or null if public
	 *  @param	vbName			Property name
	 *  @param	vbKind			Get, Let, Set
	 *  @param	idlType		
	 *  @param	vbOnErrGo		On Error Goto ErrHandler
	 *
	 *	@exception	IOException
	 */
	public void writeAttributeTail(String vbInterface, String vbName,
		String vbKind, IdlType idlType, boolean vbOnErrGo) throws IOException
	{
		if(vbKind == GET)
		{	if(vbInterface == null)
			{	writePropertyTail(vbOnErrGo? vbName + "." + vbKind: null,
					idlType.isVbSet()? vbName: null);
			}else
			{	writePropertyTail(vbOnErrGo? vbName + "." + vbKind: null,
					idlType.isVbSet()? vbInterface + "_" + vbName: null);
			}
		}else
		{
			writePropertyTail(vbOnErrGo? vbName + "." + vbKind: null, null);
		}
	}
}
