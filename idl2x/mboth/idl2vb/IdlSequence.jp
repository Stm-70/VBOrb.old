#define JP_IDL2VB
#define JP_PACKAGE mboth.idl2vb
#define JP_HEAD // extends IdlIdentifier implements IdlType

	#include "../idl2lang/IdlSequence.jp"

	/** VB names
	 */
	private final static String LENGTH= "Length";
	private final static String MAXLEN= "maxLen";
	private final static String NEWLEN= "newLen";
	private final static String NEWSIZE= "newSize";
	private final static String SEQCNT= "seqCnt";
	private final static String SEQLEN= "seqLen";
	private final static String SEQBND= "seqBnd";
	private final static String SEQISDIM= "seqIsDim";
	private final static String SEQARR= "seqArr";
	private final static String SP= " ";
	private final static String LUNIQUEID= "lUniqueId";

	/** VB name (without general prefix) or null if unset
	 */
	private String sVbName;
	
	/** (IdlDefinition)
	 *  Set the Visual Basic Name
	 *  #pragma vbname <idldef> can change the name
	 *
	 *	@param	sVbName		Can be "" if not IdlType
	 *	@return		== null, It was not too late to set
	 *				== sVbName, It is unsetable
	 *				otherwise, The old name: Cannot set twice
	 */
	public String setVbName(String sVbName)
	{
		if(prevSeq != null)
			return prevSeq.setVbName(sVbName);
		if(this.sVbName != null)
			return this.sVbName;
		this.sVbName= sVbName;
		return null;
	}

	/** (IdlDefinition)
	 *  Get the Visual Basic Name to identify the definition
	 *
	 *	@param	bPrefix	With final prefix? The name without prefix is used
	 *  				to build complex names.
	 *	@return		Visual Basic Name
	 */
	public String getVbName(boolean bPrefix)
	{
		if(prevSeq != null)
			return prevSeq.getVbName(bPrefix);
		if(sVbName == null)
		{	// if "Seq" at the end than "Arr" also at the end
			sVbName= idlType.getVbName(false);
			IdlType orgType= idlType.getOriginIdlType();
			if(orgType instanceof IdlChar)
			{	if(orgType.getIdlName() == IdlSpecification.WCHAR)
				{	if(sVbName.equals(VbWriter.INTEGER))
						sVbName= "Wchar";
				}else
				{	if(sVbName.equals(VbWriter.BYTE))
						sVbName= "Char";
				}
			}
			if(orgType instanceof IdlValueBox)
			{	if(((IdlValueBox)orgType).isJavaVBoxType())
				{	sVbName= sVbName + "VBx";
				}
			}
			sVbName= sVbName + "Seq";
		}
		if(bPrefix)
		{	return getVbClsPrefix() + sVbName;
		}
		return sVbName;
	}

	/** (IdlType)
	 *
	 *  @return				Assign by SET or LET?
	 */
	public boolean isVbSet()
	{	return true;
	}

	/** (IdlType)
	 *
	 *  @param	out		
	 *  @param	vbVariable	Name of the VB variable
	 *
	 *	@exception	java.io.IOException	
	 */
	public void writeVbRead(VbClsWriter out, String vbVariable)
		 throws java.io.IOException
	{
		out.writeLine(VbWriter.SET + " " + vbVariable + " = "
			+ VbWriter.NEW + " " + getVbName(true));
		out.writeLine(VbWriter.CALL + " " + vbVariable + "."
			+ VbWriter.INITBYREAD + "(" + VbWriter.OIN + ", " + max + ")");
	}

	/** (IdlType)
	 *
	 *  @param	out		
	 *  @param	vbVariable	Name of the VB variable
	 *
	 *	@exception	java.io.IOException	
	 */
	public void writeVbWrite(VbClsWriter out, String vbVariable)
		 throws java.io.IOException
	{
		out.writeLine(VbWriter.CALL + " " + vbVariable + "."
			+ VbWriter.WRITEME + "(" + VbWriter.OOUT + ", " + max + ")");
	}

	/** (IdlType)
	 *  Write VB code assigning the TypeCode to a VB variable
	 *  @param	out		
	 *  @param	vbVariable	Name of the VB variable getting the TypeCode
	 *
	 *	@exception	java.io.IOException	
	 */
	public void writeVbAssignTypeCode(VbWriter out, String vbVariable)
		 throws java.io.IOException
	{
		idlType.writeVbAssignTypeCode(out, vbVariable);
		out.writeAssign(vbVariable, true);
		out.writeLine("oOrb.createSequenceTc(" + max + ", "
			+ vbVariable + ")");
	}

	/** (IdlType)
	 *  Write VB code extracting the value from an oAny to a VB variable
	 *  @param	out		
	 *  @param	vbVariable	Name of the VB variable getting the value
	 *
	 *	@exception	java.io.IOException	
	 */
	public void writeVbFromAny(VbWriter out, String vbVariable)
		 throws java.io.IOException
	{	
		out.writeAssign(vbVariable, true);
		out.writeLine(VbWriter.NEW + " " + getVbName(true));
		out.writeLine(VbWriter.CALL + " " + vbVariable + "."
			+ VbWriter.INITBYANY + "(" + VbWriter.OANY + ".currentComponent())");
	}

	/** (IdlType)
	 *  Write VB code inserting the value into an oAny
	 *  @param	out		
	 *  @param	vbVariable	Name of the VB variable containing the value
	 *
	 *	@exception	java.io.IOException	
	 */
	public void writeVbIntoAny(VbWriter out, String vbVariable)
		 throws java.io.IOException
	{	
		out.writeLine(VbWriter.CALL + " " + vbVariable + "."
			+ VbWriter.INSERTINTOANY + "(" + VbWriter.OANY + ".currentComponent())");
	}

	/**
	 *  @param	opts.vbPath		Prefix
	 *  @param	opts.srvout		Write additional server skeleton examples
	 *
	 *	@exception	IOException	
	 */
	public void writeVbFiles(MainOptions opts) throws java.io.IOException
	{
		if(getFileIncludeLvl() > IDL2VB.iGenIncludeLvl)
		{	if(MainOptions.iLogLvl >= 8)
				System.out.println("D " + getIdlName()
					+ " is included only");
			return;
		}

		// Write VB class
		this.writeVbCls(opts.vbPath);

		if(boxedJavaArray != null)
		{
			// Writing VB value type factory class
			IdlValueBase.writeFactoryCls(
				boxedJavaArray.getScopedName().toString(),
				boxedJavaArray.getFilePos().getFileName(),
				getVbName(true), opts.vbPath);
		}
	}
	
	/**
	 *  @param	vbPath		Prefix
	 *
	 *	@exception	IOException	
	 */
	protected void writeVbCls(String vbPath) throws java.io.IOException
	{
		// (getScopedName() is not the ScopedName of the IdlType)
		if(boxedJavaArray != null)
		{	if(MainOptions.iLogLvl >= 4)
				System.out.println("I Writing " + getIdlName()
					+ " and " + boxedJavaArray.getScopedName() + " to `"
				+ getVbName(true) + ".cls'");
		}else
		{	if(MainOptions.iLogLvl >= 4)
				System.out.println("I Writing " + getIdlName() + " to `"
					+ getVbName(true) + ".cls'");
		}
		
		VbClsWriter vbC= new VbClsWriter(vbPath, getVbName(true),
			getFilePos().getFileName());

		if(boxedJavaArray != null)
		{	// Implements cOrbValueBase
			vbC.writeLine();
			vbC.writeLine(VbWriter.IMPLEMENTS + VbWriter.SP + VbWriter.CORBVALUEBASE);
		}
		vbC.writeLine();
		vbC.writeLine("'IDL Name: " + getIdlName());
		// Write TypeId constant declaration
		if(boxedJavaArray != null)
		{	vbC.writeLine("'" + IdlSpecification.VALUETYPE + " "
				+ boxedJavaArray.getIdlName());
			vbC.writeConstTypeId(/* isPublic */ false, boxedJavaArray.getTypeId());
		}
		vbC.writeLine();
		vbC.writeVarLine(VbWriter.PRIVATE, SEQLEN, VbWriter.LONG);
		vbC.writeVarLine(VbWriter.PRIVATE, SEQBND, VbWriter.LONG);
		vbC.writeVarLine(VbWriter.PRIVATE, SEQARR + "()",
			idlType.getVbName(true));
		vbC.writeVarLine(VbWriter.PRIVATE, SEQISDIM, VbWriter.BOOLEAN);

		if(boxedJavaArray != null)
		{	vbC.writeLine();
			vbC.writeVarLine(VbWriter.PRIVATE, LUNIQUEID, VbWriter.LONG);
		}

		// Public Property Get Length() As Long
		vbC.writeLine();
		vbC.writePropertyHead(VbWriter.PUBLIC, VbWriter.GET, LENGTH);
		vbC.writePropertyBody(VbWriter.LONG, true, false);
		vbC.writeLine(LENGTH + " = " + SEQLEN);
		vbC.writePropertyTail(null, null);

		// Public Property Let Length(ByVal newLen As Long)
		vbC.writeLine();
		vbC.writePropertyHead(VbWriter.PUBLIC, VbWriter.LET, LENGTH);
		vbC.write(VbWriter.BYVAL + SP + NEWLEN);
		vbC.writePropertyBody(VbWriter.LONG, false, true);
		vbC.writeIf(NEWLEN + " <= 0"); vbC.writeThen();
		vbC.writeLine(SEQLEN + " = 0");
		vbC.writeLine(VbWriter.ERASE + SP + SEQARR);
		vbC.writeLine(SEQISDIM + " = " + VbWriter.FALSE);
		vbC.indent(false);
		vbC.writeLine(VbWriter.ELSE);
		vbC.indent(true);
		vbC.writeIf(SEQBND + " > 0 "
			+ VbWriter.AND + SP + NEWLEN + " > " + SEQBND); vbC.writeThen();
		vbC.write(VbWriter.CALL + SP + IDL2VB.getVbOrbDLL()
			+ ".raiseBADPARAM(1, " + IDL2VB.getVbOrbDLL() + ".CompletedNO, ");
		vbC.writeLine(VbWriter.CSTR + "(" + NEWLEN + ") & \" > \" & "
			+ VbWriter.CSTR + "(" + SEQBND + "))");
		vbC.writeEndIf();
		vbC.writeLine(SEQLEN + " = " + NEWLEN);
		vbC.writeIf(SEQISDIM); vbC.writeThen();
		vbC.writeIf(NEWLEN + " > " + VbWriter.UBOUND + "(" + SEQARR + ") + 1");
		vbC.writeThen();
		vbC.writeDimLine(NEWSIZE, VbWriter.LONG);
		vbC.writeLine(NEWSIZE + " = (" + VbWriter.UBOUND
			+ "(" + SEQARR + ") * 3& + 3&) \\ 2&");
		vbC.writeIf(SEQBND + " > 0 " + VbWriter.AND
			+ SP + NEWSIZE + " > " + SEQBND); vbC.writeThen();
		vbC.writeLine(NEWSIZE + " = " + SEQBND);
		vbC.writeEndIf();
		vbC.writeIf(NEWLEN + " > " + NEWSIZE);
		vbC.writeThen();
		vbC.writeLine(NEWSIZE + " = " + NEWLEN);
		vbC.writeEndIf();
		vbC.writeLine(VbWriter.REDIM + SP + VbWriter.PRESERVE
			+ SP + SEQARR + "(0 " + VbWriter.TO + SP + NEWSIZE + " - 1)");
		vbC.writeEndIf();
		vbC.writeElse();
		vbC.writeLine(VbWriter.REDIM + SP + SEQARR + "(0 " + VbWriter.TO
			+ SP + NEWLEN + " - 1)");
		vbC.writeLine(SEQISDIM + " = " + VbWriter.TRUE);
		vbC.writeEndIf();
		vbC.writeEndIf();
		vbC.writePropertyTail(getVbName(false) + "."
			+ LENGTH + "." + VbWriter.LET, null);

		// Public Property Get Boundary() As Long
		vbC.writeLine();
		vbC.writePropertyHead(VbWriter.PUBLIC, VbWriter.GET, "Boundary");
		vbC.writePropertyBody(VbWriter.LONG, true, false);
		vbC.writeLine("Boundary = " + SEQBND);
		vbC.writePropertyTail(null, null);

		// Public Property Get Item(ByVal index As Long) As ...
		vbC.writeLine();
		vbC.writeLine("'index must be in the range of 0 to Length - 1");
		vbC.writePropertyHead(VbWriter.PUBLIC, VbWriter.GET, "Item");
		vbC.write(VbWriter.BYVAL + " index " + VbWriter.AS
			+ SP + VbWriter.LONG);
		vbC.writePropertyBody(idlType.getVbName(true), true, true);
		// Zuweisung ist stark Typeabh"angig!
		// Eigene Methode in IdlType einbauen???
		vbC.writeAssign("Item", idlType.isVbSet());
		vbC.writeLine(SEQARR + "(index)");
		vbC.writePropertyTail(getVbName(false) + ".Item." + VbWriter.GET, null);

		//  Public Property Let/Set Item(ByVal index As Long, ByVal Item As ...
		vbC.writeLine();
		vbC.writeLine("'index must be in the range of 0 to Length - 1");
		vbC.writePropertyHead(VbWriter.PUBLIC,
			idlType.isVbSet()? VbWriter.SET: VbWriter.LET, "Item");
		vbC.write(VbWriter.BYVAL + " index " + VbWriter.AS
			+ SP + VbWriter.LONG + ", " + VbWriter.BYVAL + SP + "Item");
		vbC.writePropertyBody(idlType.getVbName(true), false, true);
		// Zuweisung ist stark Typeabh"angig!
		// Eigene Methode in IdlType einbauen???
		vbC.writeAssign(SEQARR + "(index)", idlType.isVbSet());
		vbC.writeLine("Item");
		vbC.writePropertyTail(getVbName(false) + ".Item."
			+ (idlType.isVbSet()? VbWriter.SET: VbWriter.LET), null);

		// Public Function getItems(ByRef Arr() As ...
		vbC.writeLine();
		vbC.writeFuncHead(VbWriter.PUBLIC, "getItems");
		vbC.writeFuncArg(VbWriter.BYREF, "Arr()", idlType.getVbName(true),
			null);
		vbC.writeFuncBody(VbWriter.LONG, true);
		vbC.writeLine("getItems = " + SEQLEN);
		vbC.writeDimLine(SEQCNT, VbWriter.LONG);
		vbC.writeLine(VbWriter.FOR + SP + SEQCNT + " = 0 " + VbWriter.TO
			+ SP + SEQLEN + " - 1");
		vbC.indent(true);
		// Zuweisung ist stark Typeabh"angig!
		// Eigene Methode in IdlType einbauen???
		vbC.writeAssign("Arr(" + VbWriter.LBOUND + "(Arr) + "
			+ SEQCNT + ")", idlType.isVbSet());
		vbC.writeLine(SEQARR + "(" + SEQCNT + ")");
		vbC.indent(false);
		vbC.writeLine(VbWriter.NEXT + SP + SEQCNT);
		vbC.writeFuncTail("getItems", null);

		// Public Sub setItems(ByRef Arr() As ...
		vbC.writeLine();
		vbC.writeSubHead(VbWriter.PUBLIC, "setItems");
		vbC.writeSubArg(VbWriter.BYREF, "Arr()", idlType.getVbName(true),
			null);
		vbC.writeSubArg(VbWriter.BYVAL, NEWLEN, VbWriter.LONG, null);
		vbC.writeSubBody(true);
		vbC.writeLine(VbWriter.ME + "." + LENGTH + " = " + NEWLEN);
		vbC.writeDimLine(SEQCNT, VbWriter.LONG);
		vbC.writeLine(VbWriter.FOR + SP + SEQCNT + " = 0 " + VbWriter.TO
			+ SP + SEQLEN + " - 1");
		vbC.indent(true);
		// Zuweisung ist stark Typeabh"angig!
		// Eigene Methode in IdlType einbauen???
		vbC.writeAssign(SEQARR + "(" + SEQCNT + ")", idlType.isVbSet());
		vbC.writeLine("Arr(" + VbWriter.LBOUND + "(Arr) + " + SEQCNT + ")");
		vbC.indent(false);
		vbC.writeLine(VbWriter.NEXT + SP + SEQCNT);
		vbC.writeSubTail("setItems");

		// Helper, initByRead()
		vbC.writeLine();
		vbC.writeLine("'Helper");
		vbC.writeSubHead(VbWriter.PUBLIC, VbWriter.INITBYREAD);
		vbC.writeArg(VbWriter.BYVAL, VbWriter.OIN, VbWriter.CORBSTREAM, null);
		vbC.writeSubArg(VbWriter.BYVAL, MAXLEN, VbWriter.LONG, null);
		vbC.writeSubBody(true);
		vbC.writeLine(SEQBND + " = " + MAXLEN);
		vbC.writeDimLine(NEWLEN, VbWriter.LONG);
		vbC.writeLine(NEWLEN + " = " + VbWriter.OIN
			+ ".readUlong()");
		vbC.writeIf(SEQBND + " > 0 " + VbWriter.AND
			+ SP + NEWLEN + " > " + SEQBND);
		vbC.writeThen();
		vbC.write(VbWriter.CALL + SP + IDL2VB.getVbOrbDLL()
			+ ".raiseMARSHAL(1, " + IDL2VB.getVbOrbDLL() + ".CompletedNO, ");
		vbC.writeLine(VbWriter.CSTR + "(" + NEWLEN + ") & \" > \" & "
			+ VbWriter.CSTR + "(" + SEQBND + "))");
		vbC.writeEndIf();

		vbC.writeLine(SEQISDIM + " = " + VbWriter.FALSE);
		vbC.writeLine(VbWriter.ME + "." + LENGTH + " = " + NEWLEN);
		// Optimize reading sequence of octets
		IdlType orgType= idlType.getOriginIdlType();
		if(orgType instanceof IdlOctet)
		{	vbC.writeLine(VbWriter.CALL + SP + VbWriter.OIN
				+ ".readOctets(" + SEQARR + ", " + SEQLEN + ")");
		}else if(orgType instanceof IdlChar &&
			orgType.getIdlName() != IdlSpecification.WCHAR)
		{	vbC.writeLine(VbWriter.CALL + SP + VbWriter.OIN
				+ ".readChars(" + SEQARR + ", " + SEQLEN + ")");
		}else
		{	vbC.writeDimLine(SEQCNT, VbWriter.LONG);
			vbC.writeLine(VbWriter.FOR + SP + SEQCNT + " = 0 " + VbWriter.TO
				+ SP + SEQLEN + " - 1");
			vbC.indent(true);
			idlType.writeVbRead(vbC, SEQARR + "(" + SEQCNT + ")");
			vbC.indent(false);
			vbC.writeLine(VbWriter.NEXT + SP + SEQCNT);
		}
		vbC.writeSubTail(getVbName(false) + ".read");
		
		// Helper, writeMe()
		vbC.writeLine();
		vbC.writeLine("'Helper");
		vbC.writeSubHead(VbWriter.PUBLIC, VbWriter.WRITEME);
		vbC.writeArg(VbWriter.BYVAL, VbWriter.OOUT, VbWriter.CORBSTREAM, null);
		vbC.writeSubArg(VbWriter.BYVAL, MAXLEN, VbWriter.LONG, null);
		vbC.writeSubBody(true);
		vbC.writeLine(SEQBND + " = " + MAXLEN);
		
		vbC.writeIf(SEQBND + " > 0 " + VbWriter.AND
			+ SP + SEQLEN + " > " + SEQBND);
		vbC.writeThen();
		vbC.write(VbWriter.CALL + SP + IDL2VB.getVbOrbDLL()
			+ ".raiseMARSHAL(1, " + IDL2VB.getVbOrbDLL() + ".CompletedNO, ");
		vbC.writeLine(VbWriter.CSTR + "(" + SEQLEN + ") & \" > \" & "
			+ VbWriter.CSTR + "(" + SEQBND + "))");
		vbC.writeEndIf();
		
		vbC.writeLine(VbWriter.CALL + SP + VbWriter.OOUT
				+ ".writeUlong(" + SEQLEN + ")");
		// Optimize writing sequence of octets
		if(orgType instanceof IdlOctet)
		{	vbC.writeLine(VbWriter.CALL + SP + VbWriter.OOUT
				+ ".writeOctets(" + SEQARR + ", " + SEQLEN + ")");
		}else if(orgType instanceof IdlChar &&
			orgType.getIdlName() != IdlSpecification.WCHAR)
		{	vbC.writeLine(VbWriter.CALL + SP + VbWriter.OOUT
				+ ".writeChars(" + SEQARR + ", " + SEQLEN + ")");
		}else
		{	vbC.writeDimLine(SEQCNT, VbWriter.LONG);
			vbC.writeLine(VbWriter.FOR + SP + SEQCNT + " = 0 " + VbWriter.TO
				+ SP + SEQLEN + " - 1");
			vbC.indent(true);
			idlType.writeVbWrite(vbC, SEQARR + "(" + SEQCNT + ")");
			vbC.indent(false);
			vbC.writeLine(VbWriter.NEXT + SP + SEQCNT);
		}
		vbC.writeSubTail(getVbName(false) + ".write");

		/* Public Sub initByAny(ByVal oAny As cOrbAny)
		*/
		vbC.writeLine();
		vbC.writeLine("'Helper");
		vbC.writeSubHead(VbWriter.PUBLIC, VbWriter.INITBYANY);
		vbC.writeSubArg(VbWriter.BYVAL, VbWriter.OANY, VbWriter.CORBANY, null);
		vbC.writeSubBody(true);

		vbC.writeAssign(SEQBND, /*isVbSet*/false);
		vbC.writeLine(VbWriter.OANY + ".getOrigType.Length()");
		
		vbC.writeDimLine(NEWLEN, VbWriter.LONG);
		vbC.writeAssign(NEWLEN, /*isVbSet*/false);
		vbC.writeLine(VbWriter.OANY + ".seqGetLength()");
		vbC.writeIf(SEQBND + " > 0 " + VbWriter.AND
			+ SP + NEWLEN + " > " + SEQBND);
		vbC.writeThen();
		vbC.write(VbWriter.CALL + SP + IDL2VB.getVbOrbDLL()
			+ ".raiseMARSHAL(1, " + IDL2VB.getVbOrbDLL() + ".CompletedNO, ");
		vbC.writeLine(VbWriter.CSTR + "(" + NEWLEN + ") & \" > \" & "
			+ VbWriter.CSTR + "(" + SEQBND + "))");
		vbC.writeEndIf();

		vbC.writeAssign(SEQISDIM, /*isVbSet*/false);
		vbC.writeLine(VbWriter.FALSE);
		
		vbC.writeAssign(VbWriter.ME + "." + LENGTH, /*isVbSet*/false);
		vbC.writeLine(NEWLEN);

		vbC.writeDimLine(SEQCNT, VbWriter.LONG);
		vbC.writeLine(VbWriter.FOR + SP + SEQCNT + " = 0 " + VbWriter.TO
			+ SP + SEQLEN + " - 1");
		vbC.indent(true);
		idlType.writeVbFromAny(vbC, SEQARR + "(" + SEQCNT + ")");
		vbC.writeLine(VbWriter.CALL + VbWriter.SP
			+ VbWriter.OANY + ".nextPos");
		vbC.indent(false);
		vbC.writeLine(VbWriter.NEXT + SP + SEQCNT);
		vbC.writeLine(VbWriter.CALL + VbWriter.SP
			+ VbWriter.OANY + ".rewind");
		vbC.writeSubTail(VbWriter.INITBYANY);

		/* Public Sub insertIntoAny(ByVal oAny As cOrbAny)
		*/
		vbC.writeLine();
		vbC.writeLine("'Helper");
		vbC.writeSubHead(VbWriter.PUBLIC, VbWriter.INSERTINTOANY);
		vbC.writeSubArg(VbWriter.BYVAL, VbWriter.OANY, VbWriter.CORBANY, null);
		vbC.writeSubBody(true);

		vbC.writeLine(VbWriter.CALL + VbWriter.SP
			+ VbWriter.OANY + ".seqSetLength(" + SEQLEN + ")");

		vbC.writeDimLine(SEQCNT, VbWriter.LONG);
		vbC.writeLine(VbWriter.FOR + SP + SEQCNT + " = 0 " + VbWriter.TO
			+ SP + SEQLEN + " - 1");
		vbC.indent(true);
		idlType.writeVbIntoAny(vbC, SEQARR + "(" + SEQCNT + ")");
		vbC.writeLine(VbWriter.CALL + VbWriter.SP
			+ VbWriter.OANY + ".nextPos");
		vbC.indent(false);
		vbC.writeLine(VbWriter.NEXT + SP + SEQCNT);
		vbC.writeLine(VbWriter.CALL + VbWriter.SP
			+ VbWriter.OANY + ".rewind");
		vbC.writeSubTail(VbWriter.INSERTINTOANY);

		/* Implement methods to support Valuebase interface
		*/
		if(boxedJavaArray != null)
		{
			// Implements cOrbValueBase
			vbC.writeLine();
			vbC.writeFuncThisObject(VbWriter.FRIEND,
				"OrbValueBase", VbWriter.CORBVALUEBASE);

			// Helper, cOrbValueBase_UniqueId()
			String vbInterface= VbWriter.CORBVALUEBASE;
			String vbMethod= "UniqueId";
			vbC.writeLine();
			vbC.writeLine("'Helper");
			vbC.writeFuncHead(VbWriter.PRIVATE, vbInterface + "_" + vbMethod);
			vbC.writeFuncBody(VbWriter.LONG, false);
			vbC.writeIf(LUNIQUEID + " = 0");
			vbC.writeThen();
			vbC.writeLine(LUNIQUEID + " = " + IDL2VB.getVbOrbDLL()
				+ ".getNextUniqueID()");
			vbC.writeEndIf();
			vbC.writeLine(vbInterface + "_" + vbMethod + " = " + LUNIQUEID);
			vbC.writeExitEnd(VbWriter.FUNCTION, null, null);

			// Helper, initByRead()
			vbC.writeInitByReadHead(VbWriter.CORBVALUEBASE, false);
			vbC.writeLine(VbWriter.CALL + " "
				+ VbWriter.INITBYREAD + "(" + VbWriter.OIN + ", 0)");
			vbC.writeExitEnd(VbWriter.SUB, getUnEscName() + ".read", null);

			// Helper, writeMe()
			vbC.writeWriteMeHead(VbWriter.CORBVALUEBASE);
			vbC.writeLine(VbWriter.CALL + " "
				+ VbWriter.WRITEME + "(" + VbWriter.OOUT + ", 0)");
			vbC.writeExitEnd(VbWriter.SUB, getUnEscName() + ".write", null);

			// getIds()
			final String ITEM= "Item";
			vbC.writeLine();
			vbC.writeFuncHead(VbWriter.PRIVATE, vbInterface + "_getIds");
			vbC.writeFuncArg(VbWriter.BYVAL, ITEM, VbWriter.INTEGER, null);
			vbC.writeFuncBody(VbWriter.STRING, false);
			vbC.writeLine(vbInterface + "_" + "getIds" + " = "
				+ VbWriter.IIF + "(" + ITEM + " = 0, " + VbWriter.STYPEID
				+ ", \"\")");
			vbC.writeFuncTail(null, null);

			vbC.writeLine();
			vbC.writeFuncHead(VbWriter.PRIVATE, vbInterface + "_isCustom");
			vbC.writeFuncBody(VbWriter.BOOLEAN, false);
			vbC.writeLine(vbInterface + "_isCustom = " + VbWriter.FALSE);
			vbC.writeFuncTail(null, null);
		}
		vbC.close();
	}
}
